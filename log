count: 0save: 0
testCmp

    if(strcmp(g, h1) == 0) {
        h = 1;
    }else if (strcmp(g, h2) == 0){
        h = 2;
    }else {
        if(d > 1) {
            int tmp = d % 2;
            			if(tmp > 0) {
                            h = tmp ;
            			}else {
                            h = tmp - 1;
            			}
            
        }
    }
    return h;

path:
int d;
char *g;
int h;
char *h1;
char *h2;
int tmp;
int tmp___0;
int tmp___1;
tmp___1 = strcmp(g, h1);
tmp___1 != 0;
tmp___0 = strcmp(g, h2);
tmp___0 == 0;
h = 2;
return (h);

constraint:
(declare-fun _output_  () Int )
(assert (= __test__0 (
ite
(	and (< 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 0 ) 1) 1  -1)) )))
(assert (not (= __test__0 0)))
(assert (= __test__1 (
ite
(	and (< 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 0 ) 1) 1  -1)) )))
(assert (= __test__1 0))
(assert(= __test__2 2))
(assert ( = _output_ __test__2))

variable:
g:char*,d:int,h1:char*,h:int,h2:char*,
track:
g:char*,d:int,tmp___0:int,__test__2:int,tmp___1:int,tmp:int,__test__0:int,__test__1:int,h1:char*,h:int,h2:char*,
path:
int d;
char *g;
int h;
char *h1;
char *h2;
int tmp;
int tmp___0;
int tmp___1;
tmp___1 = strcmp(g, h1);
tmp___1 != 0;
tmp___0 = strcmp(g, h2);
tmp___0 != 0;
d > 1;
tmp = d % 2;
tmp > 0;
h = tmp;
return (h);

constraint:
(declare-fun _output_  () Int )
(assert (= __test__0 (
ite
(	and (< 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 0 ) 1) 1  -1)) )))
(assert (not (= __test__0 0)))
(assert (= __test__1 (
ite
(	and (< 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 0 ) 1) 1  -1)) )))
(assert (not (= __test__1 0)))
(assert ( > d 1))
(assert(= __test__2 (% d 2)))
(assert ( > __test__2 0))
(assert(= __test__3 __test__2))
(assert ( = _output_ __test__3))

variable:
g:char*,d:int,h1:char*,h:int,h2:char*,
track:
g:char*,d:int,__test__3:int,tmp___0:int,__test__2:int,tmp___1:int,tmp:int,__test__0:int,__test__1:int,h1:char*,h:int,h2:char*,
path:
int d;
char *g;
int h;
char *h1;
char *h2;
int tmp;
int tmp___0;
int tmp___1;
tmp___1 = strcmp(g, h1);
tmp___1 != 0;
tmp___0 = strcmp(g, h2);
tmp___0 != 0;
d > 1;
tmp = d % 2;
tmp <= 0;
h = tmp - 1;
return (h);

constraint:
(declare-fun _output_  () Int )
(assert (= __test__0 (
ite
(	and (< 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 0 ) 1) 1  -1)) )))
(assert (not (= __test__0 0)))
(assert (= __test__1 (
ite
(	and (< 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 0 ) 1) 1  -1)) )))
(assert (not (= __test__1 0)))
(assert ( > d 1))
(assert(= __test__2 (% d 2)))
(assert ( <= __test__2 0))
(assert(= __test__3 (- __test__2 1)))
(assert ( = _output_ __test__3))

variable:
g:char*,d:int,h1:char*,h:int,h2:char*,
track:
g:char*,d:int,__test__3:int,tmp___0:int,__test__2:int,tmp___1:int,tmp:int,__test__0:int,__test__1:int,h1:char*,h:int,h2:char*,
path:
int d;
char *g;
int h;
char *h1;
char *h2;
int tmp;
int tmp___0;
int tmp___1;
tmp___1 = strcmp(g, h1);
tmp___1 != 0;
tmp___0 = strcmp(g, h2);
tmp___0 != 0;
d <= 1;
return (h);

constraint:
(declare-fun _output_  () Int )
(assert (= __test__0 (
ite
(	and (< 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 0 ) 1) 1  -1)) )))
(assert (not (= __test__0 0)))
(assert (= __test__1 (
ite
(	and (< 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(= (compare g h2  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h2)) (length h2) (length g)))(ite (> (length g ) ( length h2)) 1 (ite (= (length g ) ( length h2)) 0 -1))
(ite
	(= (compare g h2 0 ) 1) 1  -1)) )))
(assert (not (= __test__1 0)))
(assert ( <= d 1))
(assert ( = _output_ h))

variable:
g:char*,d:int,h1:char*,h:int,h2:char*,
track:
g:char*,d:int,tmp___0:int,tmp___1:int,tmp:int,__test__0:int,__test__1:int,h1:char*,h:int,h2:char*,
path:
int d;
char *g;
int h;
char *h1;
char *h2;
int tmp;
int tmp___0;
int tmp___1;
tmp___1 = strcmp(g, h1);
tmp___1 == 0;
h = 1;
return (h);

constraint:
(declare-fun _output_  () Int )
(assert (= __test__0 (
ite
(	and (< 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  0 ) 0)) (
ite
(	and (< 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  1 ) 0)) (
ite
(	and (< 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  2 ) 0)) (
ite
(	and (< 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  3 ) 0)) (
ite
(	and (< 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  4 ) 0)) (
ite
(	and (< 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  5 ) 0)) (
ite
(	and (< 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  6 ) 0)) (
ite
(	and (< 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  7 ) 0)) (
ite
(	and (< 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  8 ) 0)) (
ite
(	and (< 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  9 ) 0)) (
ite
(	and (< 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  10 ) 0)) (
ite
(	and (< 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  11 ) 0)) (
ite
(	and (< 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  12 ) 0)) (
ite
(	and (< 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  13 ) 0)) (
ite
(	and (< 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  14 ) 0)) (
ite
(	and (< 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  15 ) 0)) (
ite
(	and (< 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  16 ) 0)) (
ite
(	and (< 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  17 ) 0)) (
ite
(	and (< 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  18 ) 0)) (
ite
(	and (< 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  19 ) 0)) (
ite
(	and (< 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(= (compare g h1  20 ) 0)) 0 
 (ite (>= 20 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 20 ) 1) 1  -1)) ) 
 (ite (>= 19 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 19 ) 1) 1  -1)) ) 
 (ite (>= 18 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 18 ) 1) 1  -1)) ) 
 (ite (>= 17 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 17 ) 1) 1  -1)) ) 
 (ite (>= 16 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 16 ) 1) 1  -1)) ) 
 (ite (>= 15 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 15 ) 1) 1  -1)) ) 
 (ite (>= 14 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 14 ) 1) 1  -1)) ) 
 (ite (>= 13 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 13 ) 1) 1  -1)) ) 
 (ite (>= 12 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 12 ) 1) 1  -1)) ) 
 (ite (>= 11 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 11 ) 1) 1  -1)) ) 
 (ite (>= 10 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 10 ) 1) 1  -1)) ) 
 (ite (>= 9 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 9 ) 1) 1  -1)) ) 
 (ite (>= 8 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 8 ) 1) 1  -1)) ) 
 (ite (>= 7 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 7 ) 1) 1  -1)) ) 
 (ite (>= 6 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 6 ) 1) 1  -1)) ) 
 (ite (>= 5 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 5 ) 1) 1  -1)) ) 
 (ite (>= 4 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 4 ) 1) 1  -1)) ) 
 (ite (>= 3 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 3 ) 1) 1  -1)) ) 
 (ite (>= 2 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 2 ) 1) 1  -1)) ) 
 (ite (>= 1 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 1 ) 1) 1  -1)) ) 
 (ite (>= 0 (ite (> (length g ) ( length h1)) (length h1) (length g)))(ite (> (length g ) ( length h1)) 1 (ite (= (length g ) ( length h1)) 0 -1))
(ite
	(= (compare g h1 0 ) 1) 1  -1)) )))
(assert (= __test__0 0))
(assert(= __test__1 1))
(assert ( = _output_ __test__1))

variable:
g:char*,d:int,h1:char*,h:int,h2:char*,
track:
g:char*,d:int,tmp___0:int,tmp___1:int,tmp:int,__test__0:int,__test__1:int,h1:char*,h:int,h2:char*,
count: 1save: 1
testIntAvg

	int sum = first + second + third;
	//int sum = first + second;
	avg = sum / 3;
	return avg;

path:
int avg;
int first;
int second;
int third;
int __cil_tmp6;
int sum;
__cil_tmp6 = first + second;
sum = __cil_tmp6 + third;
avg = sum / 3;
return (avg);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (+ first second)))
(assert(= __test__1 (+ __test__0 third)))
(assert(= __test__2 (/ __test__1 3)))
(assert ( = _output_ __test__2))

variable:
second:int,avg:int,third:int,first:int,
track:
__cil_tmp6:int,second:int,__test__2:int,sum:int,__test__0:int,__test__1:int,avg:int,first:int,third:int,
count: 2save: 2
testCmp

	int n = 5;
	cmp = strncmp(g, h, n);
	return cmp;

path:
int cmp;
char *g;
char *h;
int n;
n = 5;
cmp = strncmp(g, h, n);
return (cmp);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 5))
(assert (= __test__1 (
ite
(	and (< 0 n)(= (compare g h  0 ) 0)) (
ite
(	and (< 1 n)(= (compare g h  1 ) 0)) (
ite
(	and (< 2 n)(= (compare g h  2 ) 0)) (
ite
(	and (< 3 n)(= (compare g h  3 ) 0)) (
ite
(	and (< 4 n)(= (compare g h  4 ) 0)) (
ite
(	and (< 5 n)(= (compare g h  5 ) 0)) (
ite
(	and (< 6 n)(= (compare g h  6 ) 0)) (
ite
(	and (< 7 n)(= (compare g h  7 ) 0)) (
ite
(	and (< 8 n)(= (compare g h  8 ) 0)) (
ite
(	and (< 9 n)(= (compare g h  9 ) 0)) (
ite
(	and (< 10 n)(= (compare g h  10 ) 0)) (
ite
(	and (< 11 n)(= (compare g h  11 ) 0)) (
ite
(	and (< 12 n)(= (compare g h  12 ) 0)) (
ite
(	and (< 13 n)(= (compare g h  13 ) 0)) (
ite
(	and (< 14 n)(= (compare g h  14 ) 0)) (
ite
(	and (< 15 n)(= (compare g h  15 ) 0)) (
ite
(	and (< 16 n)(= (compare g h  16 ) 0)) (
ite
(	and (< 17 n)(= (compare g h  17 ) 0)) (
ite
(	and (< 18 n)(= (compare g h  18 ) 0)) (
ite
(	and (< 19 n)(= (compare g h  19 ) 0)) (
ite
(	and (< 20 n)(= (compare g h  20 ) 0)) 0 
 
(ite
	(= (compare g h 20 ) 1) 1  -1))  
 
(ite
	(= (compare g h 19 ) 1) 1  -1))  
 
(ite
	(= (compare g h 18 ) 1) 1  -1))  
 
(ite
	(= (compare g h 17 ) 1) 1  -1))  
 
(ite
	(= (compare g h 16 ) 1) 1  -1))  
 
(ite
	(= (compare g h 15 ) 1) 1  -1))  
 
(ite
	(= (compare g h 14 ) 1) 1  -1))  
 
(ite
	(= (compare g h 13 ) 1) 1  -1))  
 
(ite
	(= (compare g h 12 ) 1) 1  -1))  
 
(ite
	(= (compare g h 11 ) 1) 1  -1))  
 
(ite
	(= (compare g h 10 ) 1) 1  -1))  
 
(ite
	(= (compare g h 9 ) 1) 1  -1))  
 
(ite
	(= (compare g h 8 ) 1) 1  -1))  
 
(ite
	(= (compare g h 7 ) 1) 1  -1))  
 
(ite
	(= (compare g h 6 ) 1) 1  -1))  
 
(ite
	(= (compare g h 5 ) 1) 1  -1))  
 
(ite
	(= (compare g h 4 ) 1) 1  -1))  
 
(ite
	(= (compare g h 3 ) 1) 1  -1))  
 
(ite
	(= (compare g h 2 ) 1) 1  -1))  
 
(ite
	(= (compare g h 1 ) 1) 1  -1))  
 
(ite
	(= (compare g h 0 ) 1) 1  -1)) ))
(assert ( = _output_ __test__1))

variable:
g:char*,cmp:int,h:char*,
track:
g:char*,n:int,cmp:int,__test__0:int,__test__1:int,h:char*,
count: 3save: 3
testChar

	
	if(c == 'a' || c == 'b' || c == 'c') {
		g = 1;
		
	}
	else g = 0;
	return g;

path:
char c;
int g;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp3 = (int )c;
__cil_tmp9 = __cil_tmp8 || __cil_tmp6;
! (__cil_tmp9 || __cil_tmp4);
g = 0;
return (g);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 c))
(assert(= __test__1 (ite (or  (= __cil_tmp8 1) (= __cil_tmp6 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp4 1))))
(assert(= __test__2 0))
(assert ( = _output_ __test__2))

variable:
g:int,c:char,
track:
__cil_tmp9:int,__cil_tmp8:int,g:int,__cil_tmp7:int,__cil_tmp6:int,c:char,__test__2:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__cil_tmp3:int,
path:
char c;
int g;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp3 = (int )c;
__cil_tmp4 = __cil_tmp3 == 99;
__cil_tmp5 = (int )c;
__cil_tmp6 = __cil_tmp5 == 98;
__cil_tmp7 = (int )c;
__cil_tmp8 = __cil_tmp7 == 97;
__cil_tmp9 = __cil_tmp8 || __cil_tmp6;
__cil_tmp9 || __cil_tmp4;
g = 1;
return (g);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 c))
(assert(= __test__1 (ite (= __test__0 99) 1 0)))
(assert(= __test__2 c))
(assert(= __test__3 (ite (= __test__2 98) 1 0)))
(assert(= __test__4 c))
(assert(= __test__5 (ite (= __test__4 97) 1 0)))
(assert(= __test__6 (ite (or  (= __test__5 1) (= __test__3 1)) 1 0)))
(assert (or (= __test__6 1) (= __test__1 1)))
(assert(= __test__7 1))
(assert ( = _output_ __test__7))

variable:
g:int,c:char,
track:
__cil_tmp9:int,g:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,c:char,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__cil_tmp3:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,
count: 4save: 4
grade1

    char a = 'A';
    char b = 'B';
    char c = 'C';
    if(score > 90) {
    result = a;
    }
    else if(score > 80) 
    {
    result = b;
    }
    else if(score > 50){
    	result = c;
    }
    return result;

path:
char result;
int score;
char a;
char b;
char c;
a = 'A';
c = 'C';
score <= 90;
score <= 80;
score > 50;
result = c;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( <= score 80))
(assert ( > score 50))
(assert(= __test__2 __test__1))
(assert ( = _output_ __test__2))

variable:
result:char,score:int,
track:
result:char,b:char,c:char,__test__2:char,a:char,score:int,__test__0:char,__test__1:char,
path:
char result;
int score;
char a;
char b;
char c;
a = 'A';
c = 'C';
score <= 90;
score <= 80;
score <= 50;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( <= score 80))
(assert ( <= score 50))
(assert ( = _output_ result))

variable:
result:char,score:int,
track:
result:char,b:char,c:char,a:char,score:int,__test__0:char,__test__1:char,
path:
char result;
int score;
char a;
char b;
char c;
a = 'A';
c = 'C';
score <= 90;
score > 80;
result = b;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( > score 80))
(assert(= __test__2 b))
(assert ( = _output_ __test__2))

variable:
result:char,score:int,
track:
result:char,b:char,c:char,__test__2:char,a:char,score:int,__test__0:char,__test__1:char,
path:
char result;
int score;
char a;
char b;
char c;
a = 'A';
b = 'B';
c = 'C';
score > 90;
result = a;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 66))
(assert(= __test__2 67))
(assert ( > score 90))
(assert(= __test__3 __test__0))
(assert ( = _output_ __test__3))

variable:
result:char,score:int,
track:
result:char,b:char,c:char,__test__3:char,__test__2:char,a:char,score:int,__test__0:char,__test__1:char,
count: 5save: 5
grades

	char a = 'A';
	char b = 'B';
	char c = 'C';
	if(score >  90) return a;
	if(score > 80) return b;
	if(score > 70) return c;
	return c;

path:
int score;
char a;
char b;
char c;
a = 'A';
c = 'C';
score <= 90;
score <= 80;
score > 70;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( <= score 80))
(assert ( > score 70))
(assert ( = _output_ __test__1))

variable:
score:int,
track:
b:char,c:char,a:char,score:int,__test__0:char,__test__1:char,
path:
int score;
char a;
char b;
char c;
a = 'A';
b = 'B';
c = 'C';
score > 90;
return (a);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 66))
(assert(= __test__2 67))
(assert ( > score 90))
(assert ( = _output_ __test__0))

variable:
score:int,
track:
b:char,c:char,__test__2:char,a:char,score:int,__test__0:char,__test__1:char,
path:
int score;
char a;
char b;
char c;
a = 'A';
c = 'C';
score <= 90;
score > 80;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( > score 80))
(assert ( = _output_ b))

variable:
score:int,
track:
b:char,c:char,a:char,score:int,__test__0:char,__test__1:char,
path:
int score;
char a;
char b;
char c;
a = 'A';
c = 'C';
score <= 90;
score <= 80;
score <= 70;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( <= score 80))
(assert ( <= score 70))
(assert ( = _output_ __test__1))

variable:
score:int,
track:
b:char,c:char,a:char,score:int,__test__0:char,__test__1:char,
geta

	if(a == 1) b = 1;
	else b = 0;

path:
int a;
int b;
a == 1;
b = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= a 1))
(assert(= __test__0 1))
(assert ( = _output_ 0))

variable:
b:int,a:int,
track:
b:int,a:int,__test__0:int,
path:
int a;
int b;
a != 1;
b = 0;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a 1)))
(assert(= __test__0 0))
(assert ( = _output_ 0))

variable:
b:int,a:int,
track:
b:int,a:int,__test__0:int,
getB

	if(b == 1) a = 1;
	else a = 0;

path:
int a;
int b;
b == 1;
a = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= b 1))
(assert(= __test__0 1))
(assert ( = _output_ 0))

variable:
b:int,a:int,
track:
b:int,a:int,__test__0:int,
path:
int a;
int b;
b != 1;
a = 0;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= b 1)))
(assert(= __test__0 0))
(assert ( = _output_ 0))

variable:
b:int,a:int,
track:
b:int,a:int,__test__0:int,
smallest

    int d = a + (b * c) + a * a * b;
    a += a;
	if(a < b && a < c){
		return a;
	}
	else if(b < a && b < c){
		return b;
	}
	else if(c < a && c < b){
		return c;
	}
	return a;

path:
int a;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int d;
__cil_tmp5 = a * a;
a += a;
__cil_tmp9 = a < c;
__cil_tmp10 = a < b;
! (__cil_tmp10 && __cil_tmp9);
__cil_tmp11 = b < c;
__cil_tmp12 = b < a;
! (__cil_tmp12 && __cil_tmp11);
__cil_tmp13 = c < b;
__cil_tmp14 = c < a;
! (__cil_tmp14 && __cil_tmp13);
return (a);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a a)))
(assert(= __test__1( + a a )))
(assert(= __test__2 (ite (< __test__1 c) 1 0)))
(assert(= __test__3 (ite (< __test__1 b) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (< b c) 1 0)))
(assert(= __test__5 (ite (< b __test__1) 1 0)))
(assert ( not (and (= __test__5 1) (= __test__4 1))))
(assert(= __test__6 (ite (< c b) 1 0)))
(assert(= __test__7 (ite (< c __test__1) 1 0)))
(assert ( not (and (= __test__7 1) (= __test__6 1))))
(assert ( = _output_ __test__1))

variable:
b:int,c:int,a:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,d:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int d;
__cil_tmp5 = a * a;
__cil_tmp6 = __cil_tmp5 * b;
__cil_tmp7 = b * c;
__cil_tmp8 = a + __cil_tmp7;
d = __cil_tmp8 + __cil_tmp6;
a += a;
__cil_tmp9 = a < c;
__cil_tmp10 = a < b;
__cil_tmp10 && __cil_tmp9;
return (a);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a a)))
(assert(= __test__1 (* __test__0 b)))
(assert(= __test__2 (* b c)))
(assert(= __test__3 (+ a __test__2)))
(assert(= __test__4 (+ __test__3 __test__1)))
(assert(= __test__5( + a a )))
(assert(= __test__6 (ite (< __test__5 c) 1 0)))
(assert(= __test__7 (ite (< __test__5 b) 1 0)))
(assert (and (= __test__7 1) (= __test__6 1)))
(assert ( = _output_ __test__5))

variable:
b:int,c:int,a:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,d:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int d;
__cil_tmp5 = a * a;
a += a;
__cil_tmp9 = a < c;
__cil_tmp10 = a < b;
! (__cil_tmp10 && __cil_tmp9);
__cil_tmp11 = b < c;
__cil_tmp12 = b < a;
! (__cil_tmp12 && __cil_tmp11);
__cil_tmp13 = c < b;
__cil_tmp14 = c < a;
__cil_tmp14 && __cil_tmp13;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a a)))
(assert(= __test__1( + a a )))
(assert(= __test__2 (ite (< __test__1 c) 1 0)))
(assert(= __test__3 (ite (< __test__1 b) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (< b c) 1 0)))
(assert(= __test__5 (ite (< b __test__1) 1 0)))
(assert ( not (and (= __test__5 1) (= __test__4 1))))
(assert(= __test__6 (ite (< c b) 1 0)))
(assert(= __test__7 (ite (< c __test__1) 1 0)))
(assert (and (= __test__7 1) (= __test__6 1)))
(assert ( = _output_ c))

variable:
b:int,c:int,a:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,d:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int d;
__cil_tmp5 = a * a;
a += a;
__cil_tmp9 = a < c;
__cil_tmp10 = a < b;
! (__cil_tmp10 && __cil_tmp9);
__cil_tmp11 = b < c;
__cil_tmp12 = b < a;
__cil_tmp12 && __cil_tmp11;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a a)))
(assert(= __test__1( + a a )))
(assert(= __test__2 (ite (< __test__1 c) 1 0)))
(assert(= __test__3 (ite (< __test__1 b) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (< b c) 1 0)))
(assert(= __test__5 (ite (< b __test__1) 1 0)))
(assert (and (= __test__5 1) (= __test__4 1)))
(assert ( = _output_ b))

variable:
b:int,c:int,a:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,d:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,
median

	if(a < b && a > c || a > b && a < c) {
		return a + b;
	}
	else if(b < a && b > c){
		return b;
	}
	else if(c < b && c > a){
		return c;
	}

path:
int a;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp4 = a < c;
__cil_tmp9 = __cil_tmp8 && __cil_tmp7;
! (__cil_tmp9 || __cil_tmp6);
__cil_tmp10 = b > c;
__cil_tmp11 = b < a;
__cil_tmp11 && __cil_tmp10;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (< a c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp8 1) (= __cil_tmp7 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp6 1))))
(assert(= __test__2 (ite (> b c) 1 0)))
(assert(= __test__3 (ite (< b a) 1 0)))
(assert (and (= __test__3 1) (= __test__2 1)))
(assert ( = _output_ b))

variable:
b:int,c:int,a:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp4 = a < c;
__cil_tmp9 = __cil_tmp8 && __cil_tmp7;
! (__cil_tmp9 || __cil_tmp6);
__cil_tmp10 = b > c;
__cil_tmp11 = b < a;
! (__cil_tmp11 && __cil_tmp10);
__cil_tmp12 = c > a;
__cil_tmp13 = c < b;
! (__cil_tmp13 && __cil_tmp12);
return (0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (< a c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp8 1) (= __cil_tmp7 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp6 1))))
(assert(= __test__2 (ite (> b c) 1 0)))
(assert(= __test__3 (ite (< b a) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (> c a) 1 0)))
(assert(= __test__5 (ite (< c b) 1 0)))
(assert ( not (and (= __test__5 1) (= __test__4 1))))
(assert ( = _output_ 0))

variable:
b:int,c:int,a:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp4 = a < c;
__cil_tmp5 = a > b;
__cil_tmp6 = __cil_tmp5 && __cil_tmp4;
__cil_tmp7 = a > c;
__cil_tmp8 = a < b;
__cil_tmp9 = __cil_tmp8 && __cil_tmp7;
__cil_tmp9 || __cil_tmp6;
return (a + b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (< a c) 1 0)))
(assert(= __test__1 (ite (> a b) 1 0)))
(assert(= __test__2 (ite (and  (= __test__1 1) (= __test__0 1)) 1 0)))
(assert(= __test__3 (ite (> a c) 1 0)))
(assert(= __test__4 (ite (< a b) 1 0)))
(assert(= __test__5 (ite (and  (= __test__4 1) (= __test__3 1)) 1 0)))
(assert (or (= __test__5 1) (= __test__2 1)))
(assert ( = _output_ (+ a b)))

variable:
b:int,c:int,a:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,
test1

	int b = 0;
	int c = 0;
	int* p = &b;
	//char* s = "abc";
	if(a == 3){
		b = a + 1;
		c = b * 2;
	}
	else{
		c = 2 * c;
		*p = c;
	}
	int d = b * c;
	return d;

path:
int a;
int *__cil_tmp10;
int __cil_tmp11;
int *__cil_tmp6;
int *__cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
& b != 0;
__cil_tmp6 = & b;
p = & b;
a != 3;
c = 2 * c;
*p = c;
__cil_tmp10 = & b;
d = __cil_tmp11 * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert (not (= (addressOf b) 0)))
(assert(= __test__0 (addressOf b)))
(assert(= __test__1 (addressOf b)))
(assert (not (= a 3)))
(assert(= __test__2 (* 2 c)))
(assert (= valueOf __test__3 __test__2))
(assert(= __test__4 (addressOf b)))
(assert(= __test__5 (* __cil_tmp11 __test__2)))
(assert ( = _output_ __test__5))

variable:
a:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int*,d:int,__cil_tmp6:int*,b:int,c:int,a:int,__test__0:int*,__test__1:int*,__test__5:int,__test__4:int*,__test__3:int*,__test__2:int,p:int*,__cil_tmp11:int,__cil_tmp10:int*,
path:
int a;
int *__cil_tmp10;
int __cil_tmp11;
int *__cil_tmp6;
int *__cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
& b != 0;
__cil_tmp6 = & b;
*__cil_tmp6 = 0;
c = 0;
p = & b;
a == 3;
__cil_tmp7 = & b;
*__cil_tmp7 = a + 1;
__cil_tmp8 = & b;
__cil_tmp9 = *__cil_tmp8;
c = __cil_tmp9 * 2;
__cil_tmp10 = & b;
__cil_tmp11 = *__cil_tmp10;
d = __cil_tmp11 * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert (not (= (addressOf b) 0)))
(assert(= __test__0 (addressOf b)))
(assert (= valueOf __test__1 0))
(assert(= __test__2 0))
(assert(= __test__3 (addressOf b)))
(assert (= a 3))
(assert(= __test__4 (addressOf b)))
(assert (= valueOf __test__5 (+ a 1)))
(assert(= __test__6 (addressOf b)))
(assert(= __test__7 (valueOf __cil_tmp8)))
(assert(= __test__8 (* __test__7 2)))
(assert(= __test__9 (addressOf b)))
(assert(= __test__10 (valueOf __cil_tmp10)))
(assert(= __test__11 (* __test__10 __test__8)))
(assert ( = _output_ __test__11))

variable:
a:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int*,d:int,__cil_tmp6:int*,b:int,c:int,a:int,__test__0:int*,__test__1:int*,__test__9:int*,__test__8:int,__test__7:int,__test__6:int*,__test__5:int*,__test__4:int*,__test__3:int*,__test__2:int,p:int*,__test__10:int,__test__11:int,__cil_tmp11:int,__cil_tmp10:int*,
max

	int d;
	if(a > b) d = a;
	else d = b;
	if(d > c) return d;
	else return c;

path:
int a;
int b;
int c;
int d;
a <= b;
d = b;
d > c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert ( <= a b))
(assert(= __test__0 b))
(assert ( > __test__0 c))
(assert ( = _output_ __test__0))

variable:
b:int,c:int,a:int,
track:
d:int,b:int,c:int,a:int,__test__0:int,
path:
int a;
int b;
int c;
int d;
a > b;
d = a;
d <= c;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert ( > a b))
(assert(= __test__0 a))
(assert ( <= __test__0 c))
(assert ( = _output_ c))

variable:
b:int,c:int,a:int,
track:
d:int,b:int,c:int,a:int,__test__0:int,
path:
int a;
int b;
int c;
int d;
a > b;
d = a;
d > c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert ( > a b))
(assert(= __test__0 a))
(assert ( > __test__0 c))
(assert ( = _output_ __test__0))

variable:
b:int,c:int,a:int,
track:
d:int,b:int,c:int,a:int,__test__0:int,
path:
int a;
int b;
int c;
int d;
a <= b;
d = b;
d <= c;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert ( <= a b))
(assert(= __test__0 b))
(assert ( <= __test__0 c))
(assert ( = _output_ c))

variable:
b:int,c:int,a:int,
track:
d:int,b:int,c:int,a:int,__test__0:int,
Doubled

	int c = 2 * a;
	return c;

path:
int a;
int c;
c = 2 * a;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* 2 a)))
(assert ( = _output_ __test__0))

variable:
a:int,
track:
c:int,a:int,__test__0:int,
minus

	int c = a - b;
	return c;

path:
int a;
int b;
int c;
c = a - b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (- a b)))
(assert ( = _output_ __test__0))

variable:
b:int,a:int,
track:
b:int,c:int,a:int,__test__0:int,
sum


	int c = a + b;
	return c;

path:
int a;
int b;
int c;
c = a + b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (+ a b)))
(assert ( = _output_ __test__0))

variable:
b:int,a:int,
track:
b:int,c:int,a:int,__test__0:int,
muliptly

	int c = a * b;
	return c;

path:
int a;
int b;
int c;
c = a * b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a b)))
(assert ( = _output_ __test__0))

variable:
b:int,a:int,
track:
b:int,c:int,a:int,__test__0:int,
divide

	int c = a / b;
	return c;

path:
int a;
int b;
int c;
c = a / b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (/ a b)))
(assert ( = _output_ __test__0))

variable:
b:int,a:int,
track:
b:int,c:int,a:int,__test__0:int,
count: 17save: 17
median

    if(((a>=b)&&(a<=c))||((a<=b)&&(a>=c)))
        m = a;
    else if(((b>=a)&&(b<=c))||((b<=a)&&(b>=c)))
        m = b;
    else if (((c>=a)&&(c<=b))||((c<=a)&&(c>=b)))
        m = c;
	return m;
    

path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp17;
int __cil_tmp18;
int __cil_tmp19;
int __cil_tmp20;
int __cil_tmp21;
int __cil_tmp22;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a >= c;
__cil_tmp6 = a <= b;
__cil_tmp7 = __cil_tmp6 && __cil_tmp5;
__cil_tmp8 = a <= c;
__cil_tmp9 = a >= b;
__cil_tmp10 = __cil_tmp9 && __cil_tmp8;
__cil_tmp10 || __cil_tmp7;
m = a;
return (m);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (>= a c) 1 0)))
(assert(= __test__1 (ite (<= a b) 1 0)))
(assert(= __test__2 (ite (and  (= __test__1 1) (= __test__0 1)) 1 0)))
(assert(= __test__3 (ite (<= a c) 1 0)))
(assert(= __test__4 (ite (>= a b) 1 0)))
(assert(= __test__5 (ite (and  (= __test__4 1) (= __test__3 1)) 1 0)))
(assert (or (= __test__5 1) (= __test__2 1)))
(assert(= __test__6 a))
(assert ( = _output_ __test__6))

variable:
b:int,c:int,a:int,m:int,
track:
__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,__cil_tmp6:int,__cil_tmp17:int,b:int,__cil_tmp18:int,c:int,__cil_tmp19:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__cil_tmp21:int,__cil_tmp20:int,__cil_tmp22:int,
path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp17;
int __cil_tmp18;
int __cil_tmp19;
int __cil_tmp20;
int __cil_tmp21;
int __cil_tmp22;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a >= c;
__cil_tmp10 = __cil_tmp9 && __cil_tmp8;
! (__cil_tmp10 || __cil_tmp7);
__cil_tmp11 = b >= c;
__cil_tmp16 = __cil_tmp15 && __cil_tmp14;
! (__cil_tmp16 || __cil_tmp13);
__cil_tmp17 = c >= b;
__cil_tmp22 = __cil_tmp21 && __cil_tmp20;
__cil_tmp22 || __cil_tmp19;
m = c;
return (m);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (>= a c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp9 1) (= __cil_tmp8 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp7 1))))
(assert(= __test__2 (ite (>= b c) 1 0)))
(assert(= __test__3 (ite (and  (= __cil_tmp15 1) (= __cil_tmp14 1)) 1 0)))
(assert ( not (or (= __test__3 1) (= __cil_tmp13 1))))
(assert(= __test__4 (ite (>= c b) 1 0)))
(assert(= __test__5 (ite (and  (= __cil_tmp21 1) (= __cil_tmp20 1)) 1 0)))
(assert (or (= __test__5 1) (= __cil_tmp19 1)))
(assert(= __test__6 c))
(assert ( = _output_ __test__6))

variable:
b:int,c:int,a:int,m:int,
track:
__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,__cil_tmp6:int,__cil_tmp17:int,b:int,__cil_tmp18:int,c:int,__cil_tmp19:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__cil_tmp21:int,__cil_tmp20:int,__cil_tmp22:int,
path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp17;
int __cil_tmp18;
int __cil_tmp19;
int __cil_tmp20;
int __cil_tmp21;
int __cil_tmp22;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a >= c;
__cil_tmp10 = __cil_tmp9 && __cil_tmp8;
! (__cil_tmp10 || __cil_tmp7);
__cil_tmp11 = b >= c;
__cil_tmp16 = __cil_tmp15 && __cil_tmp14;
__cil_tmp16 || __cil_tmp13;
m = b;
return (m);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (>= a c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp9 1) (= __cil_tmp8 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp7 1))))
(assert(= __test__2 (ite (>= b c) 1 0)))
(assert(= __test__3 (ite (and  (= __cil_tmp15 1) (= __cil_tmp14 1)) 1 0)))
(assert (or (= __test__3 1) (= __cil_tmp13 1)))
(assert(= __test__4 b))
(assert ( = _output_ __test__4))

variable:
b:int,c:int,a:int,m:int,
track:
__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,__cil_tmp6:int,__cil_tmp17:int,b:int,__cil_tmp18:int,c:int,__cil_tmp19:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__cil_tmp21:int,__cil_tmp20:int,__cil_tmp22:int,
count: 18save: 18
median

    if(((a>=b)&&(a<=c))||((a<=b)&&(a>=c)))
        m = a;
    else if(((b>=a)&&(b<=c))||((b<=a)&&(b>=c)))
        m = b;
    else if (((c>=a)&&(c<=b))||((c<=a)&&(c>=b)))
        m = c;
    

path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp17;
int __cil_tmp18;
int __cil_tmp19;
int __cil_tmp20;
int __cil_tmp21;
int __cil_tmp22;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a >= c;
__cil_tmp10 = __cil_tmp9 && __cil_tmp8;
! (__cil_tmp10 || __cil_tmp7);
__cil_tmp11 = b >= c;
__cil_tmp16 = __cil_tmp15 && __cil_tmp14;
! (__cil_tmp16 || __cil_tmp13);
__cil_tmp17 = c >= b;
__cil_tmp22 = __cil_tmp21 && __cil_tmp20;
__cil_tmp22 || __cil_tmp19;
m = c;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (ite (>= a c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp9 1) (= __cil_tmp8 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp7 1))))
(assert(= __test__2 (ite (>= b c) 1 0)))
(assert(= __test__3 (ite (and  (= __cil_tmp15 1) (= __cil_tmp14 1)) 1 0)))
(assert ( not (or (= __test__3 1) (= __cil_tmp13 1))))
(assert(= __test__4 (ite (>= c b) 1 0)))
(assert(= __test__5 (ite (and  (= __cil_tmp21 1) (= __cil_tmp20 1)) 1 0)))
(assert (or (= __test__5 1) (= __cil_tmp19 1)))
(assert(= __test__6 c))

variable:
b:int,c:int,a:int,m:int,
track:
__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,__cil_tmp6:int,__cil_tmp17:int,b:int,__cil_tmp18:int,c:int,__cil_tmp19:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__cil_tmp21:int,__cil_tmp20:int,__cil_tmp22:int,
path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp17;
int __cil_tmp18;
int __cil_tmp19;
int __cil_tmp20;
int __cil_tmp21;
int __cil_tmp22;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a >= c;
__cil_tmp10 = __cil_tmp9 && __cil_tmp8;
! (__cil_tmp10 || __cil_tmp7);
__cil_tmp11 = b >= c;
__cil_tmp16 = __cil_tmp15 && __cil_tmp14;
__cil_tmp16 || __cil_tmp13;
m = b;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (ite (>= a c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp9 1) (= __cil_tmp8 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp7 1))))
(assert(= __test__2 (ite (>= b c) 1 0)))
(assert(= __test__3 (ite (and  (= __cil_tmp15 1) (= __cil_tmp14 1)) 1 0)))
(assert (or (= __test__3 1) (= __cil_tmp13 1)))
(assert(= __test__4 b))

variable:
b:int,c:int,a:int,m:int,
track:
__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,__cil_tmp6:int,__cil_tmp17:int,b:int,__cil_tmp18:int,c:int,__cil_tmp19:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__cil_tmp21:int,__cil_tmp20:int,__cil_tmp22:int,
path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp17;
int __cil_tmp18;
int __cil_tmp19;
int __cil_tmp20;
int __cil_tmp21;
int __cil_tmp22;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a >= c;
__cil_tmp6 = a <= b;
__cil_tmp7 = __cil_tmp6 && __cil_tmp5;
__cil_tmp8 = a <= c;
__cil_tmp9 = a >= b;
__cil_tmp10 = __cil_tmp9 && __cil_tmp8;
__cil_tmp10 || __cil_tmp7;
m = a;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (ite (>= a c) 1 0)))
(assert(= __test__1 (ite (<= a b) 1 0)))
(assert(= __test__2 (ite (and  (= __test__1 1) (= __test__0 1)) 1 0)))
(assert(= __test__3 (ite (<= a c) 1 0)))
(assert(= __test__4 (ite (>= a b) 1 0)))
(assert(= __test__5 (ite (and  (= __test__4 1) (= __test__3 1)) 1 0)))
(assert (or (= __test__5 1) (= __test__2 1)))
(assert(= __test__6 a))

variable:
b:int,c:int,a:int,m:int,
track:
__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,__cil_tmp11:int,__cil_tmp10:int,__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,__cil_tmp6:int,__cil_tmp17:int,b:int,__cil_tmp18:int,c:int,__cil_tmp19:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__cil_tmp21:int,__cil_tmp20:int,__cil_tmp22:int,
count: 19save: 19
partial

	if(a == 1 || a == 2)
	return 1;
	else return 0;

path:
int a;
int __cil_tmp2;
int __cil_tmp3;
__cil_tmp2 = a == 2;
__cil_tmp3 = a == 1;
! (__cil_tmp3 || __cil_tmp2);
return (0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (= a 2) 1 0)))
(assert(= __test__1 (ite (= a 1) 1 0)))
(assert ( not (or (= __test__1 1) (= __test__0 1))))
(assert ( = _output_ 0))

variable:
a:int,
track:
a:int,__test__0:int,__test__1:int,__cil_tmp3:int,__cil_tmp2:int,
path:
int a;
int __cil_tmp2;
int __cil_tmp3;
__cil_tmp2 = a == 2;
__cil_tmp3 = a == 1;
__cil_tmp3 || __cil_tmp2;
return (1);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (= a 2) 1 0)))
(assert(= __test__1 (ite (= a 1) 1 0)))
(assert (or (= __test__1 1) (= __test__0 1)))
(assert ( = _output_ 1))

variable:
a:int,
track:
a:int,__test__0:int,__test__1:int,__cil_tmp3:int,__cil_tmp2:int,
count: 20save: 20
recursion

	if(a == 1) result = 1;
	return result;

path:
int a;
int result;
a == 1;
result = 1;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert (= a 1))
(assert(= __test__0 1))
(assert ( = _output_ __test__0))

variable:
result:int,a:int,
track:
result:int,a:int,__test__0:int,
path:
int a;
int result;
a != 1;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a 1)))
(assert ( = _output_ result))

variable:
result:int,a:int,
track:
result:int,a:int,
normal

	if(g == 1) return 1;

path:
int g;
g != 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= g 1)))
(assert ( = _output_ 0))

variable:
g:int,
track:
g:int,
path:
int g;
g == 1;
return (1);

constraint:
(declare-fun _output_  () Int )
(assert (= g 1))
(assert ( = _output_ 1))

variable:
g:int,
track:
g:int,
count: 22save: 22
recursion

	if(a == 1) result = 1;
	else if(a == 2) result = 3;
	return result;

path:
int a;
int result;
a != 1;
a == 2;
result = 3;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a 1)))
(assert (= a 2))
(assert(= __test__0 3))
(assert ( = _output_ __test__0))

variable:
result:int,a:int,
track:
result:int,a:int,__test__0:int,
path:
int a;
int result;
a == 1;
result = 1;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert (= a 1))
(assert(= __test__0 1))
(assert ( = _output_ __test__0))

variable:
result:int,a:int,
track:
result:int,a:int,__test__0:int,
path:
int a;
int result;
a != 1;
a != 2;
return (result);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a 1)))
(assert (not (= a 2)))
(assert ( = _output_ result))

variable:
result:int,a:int,
track:
result:int,a:int,
count: 23save: 23
recursion

	if(a == 1) b = 1;

path:
int a;
int b;
a == 1;
b = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= a 1))
(assert(= __test__0 1))
(assert ( = _output_ 0))

variable:
b:int,a:int,
track:
b:int,a:int,__test__0:int,
path:
int a;
int b;
a != 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a 1)))
(assert ( = _output_ 0))

variable:
b:int,a:int,
track:
b:int,a:int,
count: 24save: 24
returnTest

	if(a == 1 || a == 2 || a == 3) return 1;
	else return 0;

path:
int a;
int __cil_tmp2;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
__cil_tmp2 = a == 3;
__cil_tmp5 = __cil_tmp4 || __cil_tmp3;
! (__cil_tmp5 || __cil_tmp2);
return (0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (= a 3) 1 0)))
(assert(= __test__1 (ite (or  (= __cil_tmp4 1) (= __cil_tmp3 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __test__0 1))))
(assert ( = _output_ 0))

variable:
a:int,
track:
a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__cil_tmp3:int,__cil_tmp2:int,
path:
int a;
int __cil_tmp2;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
__cil_tmp2 = a == 3;
__cil_tmp3 = a == 2;
__cil_tmp4 = a == 1;
__cil_tmp5 = __cil_tmp4 || __cil_tmp3;
__cil_tmp5 || __cil_tmp2;
return (1);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (= a 3) 1 0)))
(assert(= __test__1 (ite (= a 2) 1 0)))
(assert(= __test__2 (ite (= a 1) 1 0)))
(assert(= __test__3 (ite (or  (= __test__2 1) (= __test__1 1)) 1 0)))
(assert (or (= __test__3 1) (= __test__0 1)))
(assert ( = _output_ 1))

variable:
a:int,
track:
__test__3:int,__test__2:int,a:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__cil_tmp3:int,__cil_tmp2:int,
count: 25save: 25
smallest

    if(a <= b && a <= c) 
    	m = a;
    else if(b <= a && b <=c)
    	m = b;
    else if(c <= a && c <= b)
    	m = c;
    
    return m;
    

path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a <= c;
__cil_tmp6 = a <= b;
! (__cil_tmp6 && __cil_tmp5);
__cil_tmp7 = b <= c;
__cil_tmp8 = b <= a;
! (__cil_tmp8 && __cil_tmp7);
__cil_tmp9 = c <= b;
__cil_tmp10 = c <= a;
__cil_tmp10 && __cil_tmp9;
m = c;
return (m);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (<= a c) 1 0)))
(assert(= __test__1 (ite (<= a b) 1 0)))
(assert ( not (and (= __test__1 1) (= __test__0 1))))
(assert(= __test__2 (ite (<= b c) 1 0)))
(assert(= __test__3 (ite (<= b a) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (<= c b) 1 0)))
(assert(= __test__5 (ite (<= c a) 1 0)))
(assert (and (= __test__5 1) (= __test__4 1)))
(assert(= __test__6 c))
(assert ( = _output_ __test__6))

variable:
b:int,c:int,a:int,m:int,
track:
__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp10:int,
path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a <= c;
__cil_tmp6 = a <= b;
__cil_tmp6 && __cil_tmp5;
m = a;
return (m);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (<= a c) 1 0)))
(assert(= __test__1 (ite (<= a b) 1 0)))
(assert (and (= __test__1 1) (= __test__0 1)))
(assert(= __test__2 a))
(assert ( = _output_ __test__2))

variable:
b:int,c:int,a:int,m:int,
track:
__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__test__2:int,__cil_tmp10:int,
path:
int a;
int b;
int c;
int m;
int __cil_tmp10;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp5 = a <= c;
__cil_tmp6 = a <= b;
! (__cil_tmp6 && __cil_tmp5);
__cil_tmp7 = b <= c;
__cil_tmp8 = b <= a;
__cil_tmp8 && __cil_tmp7;
m = b;
return (m);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (<= a c) 1 0)))
(assert(= __test__1 (ite (<= a b) 1 0)))
(assert ( not (and (= __test__1 1) (= __test__0 1))))
(assert(= __test__2 (ite (<= b c) 1 0)))
(assert(= __test__3 (ite (<= b a) 1 0)))
(assert (and (= __test__3 1) (= __test__2 1)))
(assert(= __test__4 b))
(assert ( = _output_ __test__4))

variable:
b:int,c:int,a:int,m:int,
track:
__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,a:int,__test__0:int,m:int,__test__1:int,__cil_tmp5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp10:int,
count: 26save: 26
a

    
    char c = 'a';
    if(c == 'a' || c == 'b')
    {
        g = 1;
    }
    else g = 0;
    
    return g;
    

path:
int g;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
char c;
c = 'a';
__cil_tmp3 = (int )c;
__cil_tmp4 = __cil_tmp3 == 98;
__cil_tmp5 = (int )c;
__cil_tmp6 = __cil_tmp5 == 97;
! (__cil_tmp6 || __cil_tmp4);
g = 0;
return (g);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 97))
(assert(= __test__1 c))
(assert(= __test__2 (ite (= __test__1 98) 1 0)))
(assert(= __test__3 c))
(assert(= __test__4 (ite (= __test__3 97) 1 0)))
(assert ( not (or (= __test__4 1) (= __test__2 1))))
(assert(= __test__5 0))
(assert ( = _output_ __test__5))

variable:
g:int,
track:
g:int,__cil_tmp6:int,__test__5:int,__test__4:int,c:char,__test__3:int,__test__2:int,__test__0:char,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__cil_tmp3:int,
testChar

	
	if(c == 'a' || c == 'b' || c == 'c') {
		g = 1;
		
	}
	g = 0;
	return g;

path:
char c;
int g;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp3 = (int )c;
__cil_tmp9 = __cil_tmp8 || __cil_tmp6;
! (__cil_tmp9 || __cil_tmp4);
g = 0;
return (g);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 c))
(assert(= __test__1 (ite (or  (= __cil_tmp8 1) (= __cil_tmp6 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp4 1))))
(assert(= __test__2 0))
(assert ( = _output_ __test__2))

variable:
g:int,c:char,
track:
__cil_tmp9:int,__cil_tmp8:int,g:int,__cil_tmp7:int,__cil_tmp6:int,c:char,__test__2:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__cil_tmp3:int,
path:
char c;
int g;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp3 = (int )c;
__cil_tmp4 = __cil_tmp3 == 99;
__cil_tmp5 = (int )c;
__cil_tmp6 = __cil_tmp5 == 98;
__cil_tmp7 = (int )c;
__cil_tmp8 = __cil_tmp7 == 97;
__cil_tmp9 = __cil_tmp8 || __cil_tmp6;
__cil_tmp9 || __cil_tmp4;
g = 1;
g = 0;
return (g);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 c))
(assert(= __test__1 (ite (= __test__0 99) 1 0)))
(assert(= __test__2 c))
(assert(= __test__3 (ite (= __test__2 98) 1 0)))
(assert(= __test__4 c))
(assert(= __test__5 (ite (= __test__4 97) 1 0)))
(assert(= __test__6 (ite (or  (= __test__5 1) (= __test__3 1)) 1 0)))
(assert (or (= __test__6 1) (= __test__1 1)))
(assert(= __test__7 1))
(assert(= __test__8 0))
(assert ( = _output_ __test__8))

variable:
g:int,c:char,
track:
__cil_tmp9:int,g:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,c:char,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__cil_tmp3:int,__test__8:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,
examine

    if(a == 1 || a == 2 || a == 3) b = 1;
    else b = 0;

path:
int a___0;
int b;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
__cil_tmp3 = a___0 == 3;
__cil_tmp6 = __cil_tmp5 || __cil_tmp4;
! (__cil_tmp6 || __cil_tmp3);
b = 0;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (= a___0 3) 1 0)))
(assert(= __test__1 (ite (or  (= __cil_tmp5 1) (= __cil_tmp4 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __test__0 1))))
(assert(= __test__2 0))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
__cil_tmp6:int,b:int,__test__2:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,a___0:int,__cil_tmp3:int,
path:
int a___0;
int b;
int __cil_tmp3;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
__cil_tmp3 = a___0 == 3;
__cil_tmp4 = a___0 == 2;
__cil_tmp5 = a___0 == 1;
__cil_tmp6 = __cil_tmp5 || __cil_tmp4;
__cil_tmp6 || __cil_tmp3;
b = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (= a___0 3) 1 0)))
(assert(= __test__1 (ite (= a___0 2) 1 0)))
(assert(= __test__2 (ite (= a___0 1) 1 0)))
(assert(= __test__3 (ite (or  (= __test__2 1) (= __test__1 1)) 1 0)))
(assert (or (= __test__3 1) (= __test__0 1)))
(assert(= __test__4 1))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
__cil_tmp6:int,b:int,__test__4:int,__test__3:int,__test__2:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,a___0:int,__cil_tmp3:int,
examine1

    if(a == 1)
    {	
    	b = 1;
    }
    else if(a == 2 || a == 3)
    {
     b = 1;
     }
    else b = 0;

path:
int a___0;
int b;
int __cil_tmp3;
int __cil_tmp4;
a___0 == 1;
b = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= a___0 1))
(assert(= __test__0 1))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
b:int,__test__0:int,__cil_tmp4:int,a___0:int,__cil_tmp3:int,
path:
int a___0;
int b;
int __cil_tmp3;
int __cil_tmp4;
a___0 != 1;
__cil_tmp3 = a___0 == 3;
__cil_tmp4 = a___0 == 2;
__cil_tmp4 || __cil_tmp3;
b = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a___0 1)))
(assert(= __test__0 (ite (= a___0 3) 1 0)))
(assert(= __test__1 (ite (= a___0 2) 1 0)))
(assert (or (= __test__1 1) (= __test__0 1)))
(assert(= __test__2 1))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
b:int,__test__2:int,__test__0:int,__test__1:int,__cil_tmp4:int,a___0:int,__cil_tmp3:int,
path:
int a___0;
int b;
int __cil_tmp3;
int __cil_tmp4;
a___0 != 1;
__cil_tmp3 = a___0 == 3;
__cil_tmp4 = a___0 == 2;
! (__cil_tmp4 || __cil_tmp3);
b = 0;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a___0 1)))
(assert(= __test__0 (ite (= a___0 3) 1 0)))
(assert(= __test__1 (ite (= a___0 2) 1 0)))
(assert ( not (or (= __test__1 1) (= __test__0 1))))
(assert(= __test__2 0))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
b:int,__test__2:int,__test__0:int,__test__1:int,__cil_tmp4:int,a___0:int,__cil_tmp3:int,
grades

	char a = 'A';
	char b = 'B';
	char c = 'C';
	if(score >  90) return a;
	if(score > 80) return b;
	if(score > 70) return c;
	return c;

path:
int score;
char a___0;
char b;
char c;
a___0 = 'A';
c = 'C';
score <= 90;
score > 80;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( > score 80))
(assert ( = _output_ b))

variable:
score:int,
track:
b:char,c:char,score:int,__test__0:char,__test__1:char,a___0:char,
path:
int score;
char a___0;
char b;
char c;
a___0 = 'A';
b = 'B';
c = 'C';
score > 90;
return (a___0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 66))
(assert(= __test__2 67))
(assert ( > score 90))
(assert ( = _output_ __test__0))

variable:
score:int,
track:
b:char,c:char,__test__2:char,score:int,__test__0:char,__test__1:char,a___0:char,
path:
int score;
char a___0;
char b;
char c;
a___0 = 'A';
c = 'C';
score <= 90;
score <= 80;
score <= 70;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( <= score 80))
(assert ( <= score 70))
(assert ( = _output_ __test__1))

variable:
score:int,
track:
b:char,c:char,score:int,__test__0:char,__test__1:char,a___0:char,
path:
int score;
char a___0;
char b;
char c;
a___0 = 'A';
c = 'C';
score <= 90;
score <= 80;
score > 70;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 65))
(assert(= __test__1 67))
(assert ( <= score 90))
(assert ( <= score 80))
(assert ( > score 70))
(assert ( = _output_ __test__1))

variable:
score:int,
track:
b:char,c:char,score:int,__test__0:char,__test__1:char,a___0:char,
geta

	if(a == 1) b = 1;
	else b = 0;

path:
int a___0;
int b;
a___0 != 1;
b = 0;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= a___0 1)))
(assert(= __test__0 0))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
b:int,__test__0:int,a___0:int,
path:
int a___0;
int b;
a___0 == 1;
b = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= a___0 1))
(assert(= __test__0 1))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
b:int,__test__0:int,a___0:int,
getB

	if(b == 1) a = 1;
	else a = 0;

path:
int a___0;
int b;
b != 1;
a___0 = 0;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= b 1)))
(assert(= __test__0 0))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
b:int,__test__0:int,a___0:int,
path:
int a___0;
int b;
b == 1;
a___0 = 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= b 1))
(assert(= __test__0 1))
(assert ( = _output_ 0))

variable:
b:int,a___0:int,
track:
b:int,__test__0:int,a___0:int,
smallest

    int d = a + (b * c) + a * a * b;
    a += a;
	if(a < b && a < c){
        strcpy(a, b);
        int a = strncpy(a, b, c);
		return a;
	}
	else if(b < a && b < c){
		return b;
	}
	else if(c < a && c < b){
		return c;
	}
	return a;

path:
int a___0;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int a___1;
int d;
int tmp;
__cil_tmp7 = a___0 * a___0;
__cil_tmp8 = __cil_tmp7 * b;
__cil_tmp9 = b * c;
__cil_tmp10 = a___0 + __cil_tmp9;
d = __cil_tmp10 + __cil_tmp8;
a___0 += a___0;
__cil_tmp11 = a___0 < c;
__cil_tmp12 = a___0 < b;
__cil_tmp12 && __cil_tmp11;
strcpy(a___0, b);
tmp = strncpy(a___1, b, c);
a___1 = tmp;
return (a___1);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a___0 a___0)))
(assert(= __test__1 (* __test__0 b)))
(assert(= __test__2 (* b c)))
(assert(= __test__3 (+ a___0 __test__2)))
(assert(= __test__4 (+ __test__3 __test__1)))
(assert(= __test__5( + a___0 a___0 )))
(assert(= __test__6 (ite (< __test__5 c) 1 0)))
(assert(= __test__7 (ite (< __test__5 b) 1 0)))
(assert (and (= __test__7 1) (= __test__6 1)))
(assert (= __test__8 b))
(assert (= (length __test__10) c))
(assert (forall ((index Int)) (ite (and (>= index 0) (< index c)) (= (charOf __test__10 index) (charOf b index)) true)))
(assert (= __test__9 __test__10))
(assert(= __test__11 __test__9))
(assert ( = _output_ __test__11))

variable:
b:int,c:int,a___0:int,
track:
__test__9:int,__test__8:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,tmp:int,__cil_tmp12:int,a___1:int,__cil_tmp11:int,a___0:int,__cil_tmp10:int,__cil_tmp9:int,__cil_tmp13:int,__cil_tmp8:int,__cil_tmp14:int,__cil_tmp7:int,__cil_tmp15:int,d:int,__cil_tmp16:int,b:int,c:int,__test__0:int,__test__1:int,__test__10:int,__test__11:int,
path:
int a___0;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int a___1;
int d;
int tmp;
__cil_tmp7 = a___0 * a___0;
a___0 += a___0;
__cil_tmp11 = a___0 < c;
__cil_tmp12 = a___0 < b;
! (__cil_tmp12 && __cil_tmp11);
__cil_tmp13 = b < c;
__cil_tmp14 = b < a___0;
! (__cil_tmp14 && __cil_tmp13);
__cil_tmp15 = c < b;
__cil_tmp16 = c < a___0;
! (__cil_tmp16 && __cil_tmp15);
return (a___0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a___0 a___0)))
(assert(= __test__1( + a___0 a___0 )))
(assert(= __test__2 (ite (< __test__1 c) 1 0)))
(assert(= __test__3 (ite (< __test__1 b) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (< b c) 1 0)))
(assert(= __test__5 (ite (< b __test__1) 1 0)))
(assert ( not (and (= __test__5 1) (= __test__4 1))))
(assert(= __test__6 (ite (< c b) 1 0)))
(assert(= __test__7 (ite (< c __test__1) 1 0)))
(assert ( not (and (= __test__7 1) (= __test__6 1))))
(assert ( = _output_ __test__1))

variable:
b:int,c:int,a___0:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,d:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,b:int,c:int,__test__0:int,__test__1:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,tmp:int,a___1:int,__cil_tmp12:int,a___0:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a___0;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int a___1;
int d;
int tmp;
__cil_tmp7 = a___0 * a___0;
a___0 += a___0;
__cil_tmp11 = a___0 < c;
__cil_tmp12 = a___0 < b;
! (__cil_tmp12 && __cil_tmp11);
__cil_tmp13 = b < c;
__cil_tmp14 = b < a___0;
! (__cil_tmp14 && __cil_tmp13);
__cil_tmp15 = c < b;
__cil_tmp16 = c < a___0;
__cil_tmp16 && __cil_tmp15;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a___0 a___0)))
(assert(= __test__1( + a___0 a___0 )))
(assert(= __test__2 (ite (< __test__1 c) 1 0)))
(assert(= __test__3 (ite (< __test__1 b) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (< b c) 1 0)))
(assert(= __test__5 (ite (< b __test__1) 1 0)))
(assert ( not (and (= __test__5 1) (= __test__4 1))))
(assert(= __test__6 (ite (< c b) 1 0)))
(assert(= __test__7 (ite (< c __test__1) 1 0)))
(assert (and (= __test__7 1) (= __test__6 1)))
(assert ( = _output_ c))

variable:
b:int,c:int,a___0:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,d:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,b:int,c:int,__test__0:int,__test__1:int,__test__7:int,__test__6:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,tmp:int,a___1:int,__cil_tmp12:int,a___0:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a___0;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp14;
int __cil_tmp15;
int __cil_tmp16;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
int a___1;
int d;
int tmp;
__cil_tmp7 = a___0 * a___0;
a___0 += a___0;
__cil_tmp11 = a___0 < c;
__cil_tmp12 = a___0 < b;
! (__cil_tmp12 && __cil_tmp11);
__cil_tmp13 = b < c;
__cil_tmp14 = b < a___0;
__cil_tmp14 && __cil_tmp13;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a___0 a___0)))
(assert(= __test__1( + a___0 a___0 )))
(assert(= __test__2 (ite (< __test__1 c) 1 0)))
(assert(= __test__3 (ite (< __test__1 b) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (< b c) 1 0)))
(assert(= __test__5 (ite (< b __test__1) 1 0)))
(assert (and (= __test__5 1) (= __test__4 1)))
(assert ( = _output_ b))

variable:
b:int,c:int,a___0:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp14:int,__cil_tmp8:int,d:int,__cil_tmp15:int,__cil_tmp7:int,__cil_tmp16:int,b:int,c:int,__test__0:int,__test__1:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,tmp:int,a___1:int,__cil_tmp12:int,a___0:int,__cil_tmp11:int,__cil_tmp10:int,
median

	if(a < b && a > c || a > b && a < c) {
		return a + b;
	}
	else if(b < a && b > c){
		return b;
	}
	else if(c < b && c > a){
		return c;
	}

path:
int a___0;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp4 = a___0 < c;
__cil_tmp9 = __cil_tmp8 && __cil_tmp7;
! (__cil_tmp9 || __cil_tmp6);
__cil_tmp10 = b > c;
__cil_tmp11 = b < a___0;
! (__cil_tmp11 && __cil_tmp10);
__cil_tmp12 = c > a___0;
__cil_tmp13 = c < b;
! (__cil_tmp13 && __cil_tmp12);
return (0);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (< a___0 c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp8 1) (= __cil_tmp7 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp6 1))))
(assert(= __test__2 (ite (> b c) 1 0)))
(assert(= __test__3 (ite (< b a___0) 1 0)))
(assert ( not (and (= __test__3 1) (= __test__2 1))))
(assert(= __test__4 (ite (> c a___0) 1 0)))
(assert(= __test__5 (ite (< c b) 1 0)))
(assert ( not (and (= __test__5 1) (= __test__4 1))))
(assert ( = _output_ 0))

variable:
b:int,c:int,a___0:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,a___0:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a___0;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp4 = a___0 < c;
__cil_tmp9 = __cil_tmp8 && __cil_tmp7;
! (__cil_tmp9 || __cil_tmp6);
__cil_tmp10 = b > c;
__cil_tmp11 = b < a___0;
__cil_tmp11 && __cil_tmp10;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (< a___0 c) 1 0)))
(assert(= __test__1 (ite (and  (= __cil_tmp8 1) (= __cil_tmp7 1)) 1 0)))
(assert ( not (or (= __test__1 1) (= __cil_tmp6 1))))
(assert(= __test__2 (ite (> b c) 1 0)))
(assert(= __test__3 (ite (< b a___0) 1 0)))
(assert (and (= __test__3 1) (= __test__2 1)))
(assert ( = _output_ b))

variable:
b:int,c:int,a___0:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__test__3:int,__test__2:int,__cil_tmp12:int,a___0:int,__cil_tmp11:int,__cil_tmp10:int,
path:
int a___0;
int b;
int c;
int __cil_tmp10;
int __cil_tmp11;
int __cil_tmp12;
int __cil_tmp13;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
int __cil_tmp8;
int __cil_tmp9;
__cil_tmp4 = a___0 < c;
__cil_tmp5 = a___0 > b;
__cil_tmp6 = __cil_tmp5 && __cil_tmp4;
__cil_tmp7 = a___0 > c;
__cil_tmp8 = a___0 < b;
__cil_tmp9 = __cil_tmp8 && __cil_tmp7;
__cil_tmp9 || __cil_tmp6;
return (a___0 + b);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (ite (< a___0 c) 1 0)))
(assert(= __test__1 (ite (> a___0 b) 1 0)))
(assert(= __test__2 (ite (and  (= __test__1 1) (= __test__0 1)) 1 0)))
(assert(= __test__3 (ite (> a___0 c) 1 0)))
(assert(= __test__4 (ite (< a___0 b) 1 0)))
(assert(= __test__5 (ite (and  (= __test__4 1) (= __test__3 1)) 1 0)))
(assert (or (= __test__5 1) (= __test__2 1)))
(assert ( = _output_ (+ a___0 b)))

variable:
b:int,c:int,a___0:int,
track:
__cil_tmp13:int,__cil_tmp9:int,__cil_tmp8:int,__cil_tmp7:int,__cil_tmp6:int,b:int,c:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,__test__5:int,__test__4:int,__test__3:int,__test__2:int,__cil_tmp12:int,a___0:int,__cil_tmp11:int,__cil_tmp10:int,
test1

	int b = 0;
	int c = 0;
	int* p = &b;
	//char* s = "abc";
	if(a == 3){
		b = a + 1;
		c = b * 2;
	}
	else{
		c = 2 * c;
		*p = c;
	}
	int d = b * c;
	return d;

path:
int a___0;
int *__cil_tmp10;
int __cil_tmp11;
int *__cil_tmp6;
int *__cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
& b != 0;
__cil_tmp6 = & b;
*__cil_tmp6 = 0;
c = 0;
p = & b;
a___0 == 3;
__cil_tmp7 = & b;
*__cil_tmp7 = a___0 + 1;
__cil_tmp8 = & b;
__cil_tmp9 = *__cil_tmp8;
c = __cil_tmp9 * 2;
__cil_tmp10 = & b;
__cil_tmp11 = *__cil_tmp10;
d = __cil_tmp11 * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert (not (= (addressOf b) 0)))
(assert(= __test__0 (addressOf b)))
(assert (= valueOf __test__1 0))
(assert(= __test__2 0))
(assert(= __test__3 (addressOf b)))
(assert (= a___0 3))
(assert(= __test__4 (addressOf b)))
(assert (= valueOf __test__5 (+ a___0 1)))
(assert(= __test__6 (addressOf b)))
(assert(= __test__7 (valueOf __cil_tmp8)))
(assert(= __test__8 (* __test__7 2)))
(assert(= __test__9 (addressOf b)))
(assert(= __test__10 (valueOf __cil_tmp10)))
(assert(= __test__11 (* __test__10 __test__8)))
(assert ( = _output_ __test__11))

variable:
a___0:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int*,d:int,__cil_tmp6:int*,b:int,c:int,__test__0:int*,__test__1:int*,__test__9:int*,__test__8:int,__test__7:int,__test__6:int*,__test__5:int*,__test__4:int*,__test__3:int*,__test__2:int,p:int*,__test__10:int,__test__11:int,a___0:int,__cil_tmp11:int,__cil_tmp10:int*,
path:
int a___0;
int *__cil_tmp10;
int __cil_tmp11;
int *__cil_tmp6;
int *__cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
& b != 0;
__cil_tmp6 = & b;
p = & b;
a___0 != 3;
c = 2 * c;
*p = c;
__cil_tmp10 = & b;
d = __cil_tmp11 * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert (not (= (addressOf b) 0)))
(assert(= __test__0 (addressOf b)))
(assert(= __test__1 (addressOf b)))
(assert (not (= a___0 3)))
(assert(= __test__2 (* 2 c)))
(assert (= valueOf __test__3 __test__2))
(assert(= __test__4 (addressOf b)))
(assert(= __test__5 (* __cil_tmp11 __test__2)))
(assert ( = _output_ __test__5))

variable:
a___0:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int*,d:int,__cil_tmp6:int*,b:int,c:int,__test__0:int*,__test__1:int*,__test__5:int,__test__4:int*,__test__3:int*,__test__2:int,p:int*,a___0:int,__cil_tmp11:int,__cil_tmp10:int*,
test2

	int b = 0;
	int c = 0;
	int* p = &a;
	//char* s = "abc";
	if(a < 3){
		b = a + 1;
		c = b * 2;
	}
	else{
		c = 2 * c;
		*p = c;
	}
	int d = b * c;
	return d;

path:
int a___0;
int *__cil_tmp6;
int __cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
b = 0;
c = 0;
p = & a___0;
__cil_tmp6 = & a___0;
__cil_tmp7 = *__cil_tmp6;
__cil_tmp7 < 3;
__cil_tmp8 = & a___0;
__cil_tmp9 = *__cil_tmp8;
b = __cil_tmp9 + 1;
c = b * 2;
d = b * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 0))
(assert(= __test__1 0))
(assert(= __test__2 (addressOf a___0)))
(assert(= __test__3 (addressOf a___0)))
(assert(= __test__4 (valueOf __cil_tmp6)))
(assert ( < __test__4 3))
(assert(= __test__5 (addressOf a___0)))
(assert(= __test__6 (valueOf __cil_tmp8)))
(assert(= __test__7 (+ __test__6 1)))
(assert(= __test__8 (* __test__7 2)))
(assert(= __test__9 (* __test__7 __test__8)))
(assert ( = _output_ __test__9))

variable:
a___0:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int,d:int,__cil_tmp6:int*,b:int,c:int,__test__0:int,__test__1:int,__test__9:int,__test__8:int,__test__7:int,__test__6:int,__test__5:int*,__test__4:int,__test__3:int*,p:int*,__test__2:int*,a___0:int,
path:
int a___0;
int *__cil_tmp6;
int __cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
b = 0;
p = & a___0;
__cil_tmp6 = & a___0;
__cil_tmp7 = *__cil_tmp6;
__cil_tmp7 >= 3;
& a___0 != 0;
c = 2 * c;
*p = c;
d = b * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 0))
(assert(= __test__1 (addressOf a___0)))
(assert(= __test__2 (addressOf a___0)))
(assert(= __test__3 (valueOf __cil_tmp6)))
(assert ( >= __test__3 3))
(assert (not (= (addressOf a___0) 0)))
(assert(= __test__4 (* 2 c)))
(assert (= valueOf __test__5 __test__4))
(assert(= __test__6 (* __test__0 __test__4)))
(assert ( = _output_ __test__6))

variable:
a___0:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int,d:int,__cil_tmp6:int*,b:int,c:int,__test__0:int,__test__1:int*,__test__6:int,__test__5:int*,__test__4:int,__test__3:int,p:int*,__test__2:int*,a___0:int,
max

	int d;
	if(a > b) d = a;
	else d = b;
	if(d > c) return d;
	else return c;

path:
int a___0;
int b;
int c;
int d;
a___0 <= b;
d = b;
d > c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert ( <= a___0 b))
(assert(= __test__0 b))
(assert ( > __test__0 c))
(assert ( = _output_ __test__0))

variable:
b:int,c:int,a___0:int,
track:
d:int,b:int,c:int,__test__0:int,a___0:int,
path:
int a___0;
int b;
int c;
int d;
a___0 > b;
d = a___0;
d > c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert ( > a___0 b))
(assert(= __test__0 a___0))
(assert ( > __test__0 c))
(assert ( = _output_ __test__0))

variable:
b:int,c:int,a___0:int,
track:
d:int,b:int,c:int,__test__0:int,a___0:int,
path:
int a___0;
int b;
int c;
int d;
a___0 <= b;
d = b;
d <= c;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert ( <= a___0 b))
(assert(= __test__0 b))
(assert ( <= __test__0 c))
(assert ( = _output_ c))

variable:
b:int,c:int,a___0:int,
track:
d:int,b:int,c:int,__test__0:int,a___0:int,
path:
int a___0;
int b;
int c;
int d;
a___0 > b;
d = a___0;
d <= c;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert ( > a___0 b))
(assert(= __test__0 a___0))
(assert ( <= __test__0 c))
(assert ( = _output_ c))

variable:
b:int,c:int,a___0:int,
track:
d:int,b:int,c:int,__test__0:int,a___0:int,
Doubled

	int c = 2 * a;
	return c;

path:
int a___0;
int c;
c = 2 * a___0;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* 2 a___0)))
(assert ( = _output_ __test__0))

variable:
a___0:int,
track:
c:int,__test__0:int,a___0:int,
minus

	int c = a - b;
	return c;

path:
int a___0;
int b;
int c;
c = a___0 - b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (- a___0 b)))
(assert ( = _output_ __test__0))

variable:
b:int,a___0:int,
track:
b:int,c:int,__test__0:int,a___0:int,
sum


	int c = a + b;
	return c;

path:
int a___0;
int b;
int c;
c = a___0 + b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (+ a___0 b)))
(assert ( = _output_ __test__0))

variable:
b:int,a___0:int,
track:
b:int,c:int,__test__0:int,a___0:int,
muliptly

	int c = a * b;
	return c;

path:
int a___0;
int b;
int c;
c = a___0 * b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* a___0 b)))
(assert ( = _output_ __test__0))

variable:
b:int,a___0:int,
track:
b:int,c:int,__test__0:int,a___0:int,
divide

	int c = a / b;
	return c;

path:
int a___0;
int b;
int c;
c = a___0 / b;
return (c);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (/ a___0 b)))
(assert ( = _output_ __test__0))

variable:
b:int,a___0:int,
track:
b:int,c:int,__test__0:int,a___0:int,
count: 43save: 43
test2

	int b = 0;
	int c = 0;
	int* p = &a;
	//char* s = "abc";
	if(a < 3){
		b = a + 1;
		c = b * 2;
	}
	else{
		c = 2 * c;
		*p = c;
	}
	int d = b * c;
	return d;

path:
int a;
int *__cil_tmp6;
int __cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
b = 0;
c = 0;
p = & a;
__cil_tmp6 = & a;
__cil_tmp7 = *__cil_tmp6;
__cil_tmp7 < 3;
__cil_tmp8 = & a;
__cil_tmp9 = *__cil_tmp8;
b = __cil_tmp9 + 1;
c = b * 2;
d = b * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 0))
(assert(= __test__1 0))
(assert(= __test__2 (addressOf a)))
(assert(= __test__3 (addressOf a)))
(assert(= __test__4 (valueOf __cil_tmp6)))
(assert ( < __test__4 3))
(assert(= __test__5 (addressOf a)))
(assert(= __test__6 (valueOf __cil_tmp8)))
(assert(= __test__7 (+ __test__6 1)))
(assert(= __test__8 (* __test__7 2)))
(assert(= __test__9 (* __test__7 __test__8)))
(assert ( = _output_ __test__9))

variable:
a:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int,d:int,__cil_tmp6:int*,b:int,c:int,a:int,__test__0:int,__test__1:int,__test__9:int,__test__8:int,__test__7:int,__test__6:int,__test__5:int*,__test__4:int,__test__3:int*,p:int*,__test__2:int*,
path:
int a;
int *__cil_tmp6;
int __cil_tmp7;
int *__cil_tmp8;
int __cil_tmp9;
int b;
int c;
int d;
int *p;
b = 0;
p = & a;
__cil_tmp6 = & a;
__cil_tmp7 = *__cil_tmp6;
__cil_tmp7 >= 3;
& a != 0;
c = 2 * c;
*p = c;
d = b * c;
return (d);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 0))
(assert(= __test__1 (addressOf a)))
(assert(= __test__2 (addressOf a)))
(assert(= __test__3 (valueOf __cil_tmp6)))
(assert ( >= __test__3 3))
(assert (not (= (addressOf a) 0)))
(assert(= __test__4 (* 2 c)))
(assert (= valueOf __test__5 __test__4))
(assert(= __test__6 (* __test__0 __test__4)))
(assert ( = _output_ __test__6))

variable:
a:int,
track:
__cil_tmp9:int,__cil_tmp8:int*,__cil_tmp7:int,d:int,__cil_tmp6:int*,b:int,c:int,a:int,__test__0:int,__test__1:int*,__test__6:int,__test__5:int*,__test__4:int,__test__3:int,p:int*,__test__2:int*,
count: 44save: 44
test

publish = next       ;
path:
int next;
int publish;
publish = next;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 next))

variable:
next:int,publish:int,
track:
next:int,__test__0:int,publish:int,
count: 45save: 45
test

basebranch = "$1"  ;
path:
int basebranch;
basebranch = "$1";
return;

constraint:
(declare-fun _output_  () Void )
(assert (= (length __test__0) 2))
(assert (= (charOf __test__0 0) _dollar_ ))
(assert (= (charOf __test__0 1) _1_ ))

variable:
basebranch:int,
track:
basebranch:int,__test__0:int,
count: 46save: 46
count: 46save: 46
count: 46save: 46
test

ret *=  c    +  1        ;
path:
int c;
int ret;
int __cil_tmp3;
__cil_tmp3 = c + 1;
ret *= __cil_tmp3;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (+ c 1)))
(assert(= __test__1( * ret __test__0 )))

variable:
ret:int,c:int,
track:
ret:int,c:int,__test__0:int,__test__1:int,__cil_tmp3:int,
count: 47save: 47
test

return ret      ;
path:
int ret;
return (ret);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ ret))

variable:
ret:int,
track:
ret:int,
count: 48save: 48
test

str = mpz_get_str ( NULL       , 10       , sum       )         ;
path:
int str;
__asm__  ("booo_exp(test107.c:2)":);
__asm__  ("booo_exp(test107.c:2)":);
str = mpz_get_str(0, 10, 0);
return;

constraint:
(declare-fun _output_  () Void )

variable:
str:int,
track:
str:int,__test__0:int,
count: 49save: 49
count: 49save: 49
count: 49save: 49
test

max_i = 0       ;
path:
int max_i;
max_i = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
max_i:int,
track:
max_i:int,__test__0:int,
count: 50save: 50
test

n = n   %  2   == 0     ;
path:
int n;
int __cil_tmp2;
__cil_tmp2 = n % 2;
n = __cil_tmp2 == 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (% n 2)))
(assert(= __test__1 (ite (= __test__0 0) 1 0)))

variable:
n:int,
track:
n:int,__test__0:int,__test__1:int,__cil_tmp2:int,
count: 51save: 51
test

return c    +  1       ;
path:
int c;
return (c + 1);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ (+ c 1)))

variable:
c:int,
track:
c:int,
count: 52save: 52
test

str = mpz_get_str ( NULL       , 10       , n       )         ;
path:
int str;
__asm__  ("booo_exp(test117.c:2)":);
__asm__  ("booo_exp(test117.c:2)":);
str = mpz_get_str(0, 10, 0);
return;

constraint:
(declare-fun _output_  () Void )

variable:
str:int,
track:
str:int,__test__0:int,
count: 53save: 53
test

len = mpz_sizeinbase ( n       , 10       )         ;
path:
int len;
__asm__  ("booo_exp(test118.c:2)":);
len = mpz_sizeinbase(0, 10);
return;

constraint:
(declare-fun _output_  () Void )

variable:
len:int,
track:
__test__0:int,len:int,
count: 54save: 54
count: 54save: 54
test

sum +=  s1   [ 1 ]  +  thousand        ;
path:
int s1;
int sum;
int thousand;
__asm__  ("booo_exp(test128.c:2)":);
sum += thousand;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0( + sum thousand )))

variable:
s1:int,sum:int,thousand:int,
track:
s1:int,sum:int,__test__0:int,thousand:int,
count: 55save: 55
count: 55save: 55
count: 55save: 55
test

left = findmax ( triangle       , row    +  1        , col       )         ;
path:
int left;
__asm__  ("booo_exp(test135.c:2)":);
__asm__  ("booo_exp(test135.c:2)":);
__asm__  ("booo_exp(test135.c:2)":);
left = findmax(0, 1, 0);
return;

constraint:
(declare-fun _output_  () Void )

variable:
left:int,
track:
__test__0:int,left:int,
count: 56save: 56
test

right = findmax ( triangle       , row    +  1        , col    +  1        )         ;
path:
int right;
__asm__  ("booo_exp(test136.c:2)":);
__asm__  ("booo_exp(test136.c:2)":);
__asm__  ("booo_exp(test136.c:2)":);
right = findmax(0, 1, 1);
return;

constraint:
(declare-fun _output_  () Void )

variable:
right:int,
track:
__test__0:int,right:int,
count: 57save: 57
count: 57save: 57
count: 57save: 57
count: 57save: 57
count: 57save: 57
count: 57save: 57
test

str = mpz_get_str ( NULL       , 10       , n       )         ;
path:
int str;
__asm__  ("booo_exp(test146.c:2)":);
__asm__  ("booo_exp(test146.c:2)":);
str = mpz_get_str(0, 10, 0);
return;

constraint:
(declare-fun _output_  () Void )

variable:
str:int,
track:
str:int,__test__0:int,
count: 58save: 58
count: 58save: 58
test

sum = 0       ;
path:
int sum;
sum = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
sum:int,
track:
sum:int,__test__0:int,
count: 59save: 59
count: 59save: 59
test

k = n       ;
path:
int k;
int n;
k = n;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 n))

variable:
n:int,k:int,
track:
n:int,__test__0:int,k:int,
count: 60save: 60
test

sum *=  ( p   *  i    -  1      )  /  ( i   -1   )      ;
path:
int i;
int p;
int sum;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
__cil_tmp4 = i - 1;
__cil_tmp5 = p * i;
__cil_tmp6 = __cil_tmp5 - 1;
__cil_tmp7 = __cil_tmp6 / __cil_tmp4;
sum *= __cil_tmp7;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (- i 1)))
(assert(= __test__1 (* p i)))
(assert(= __test__2 (- __test__1 1)))
(assert(= __test__3 (/ __test__2 __test__0)))
(assert(= __test__4( * sum __test__3 )))

variable:
p:int,sum:int,i:int,
track:
__cil_tmp7:int,__cil_tmp6:int,__test__4:int,__test__3:int,__test__2:int,p:int,sum:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,i:int,
count: 61save: 61
test

return sum    -  n       ;
path:
int n;
int sum;
return (sum - n);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ (- sum n)))

variable:
n:int,sum:int,
track:
n:int,sum:int,
count: 62save: 62
test

fp = fopen ( path       , "r"  )         ;
path:
int fp;
__asm__  ("booo_exp(test159.c:2)":);
fp = fopen(0, "r");
return;

constraint:
(declare-fun _output_  () Void )

variable:
fp:int,
track:
__test__0:int,fp:int,
count: 63save: 63
count: 63save: 63
count: 63save: 63
java.lang.NullPointerException
count: 64save: 63
test

sum +=  s   *  ( i    +  1      )      ;
path:
int i;
int s;
int sum;
int __cil_tmp4;
int __cil_tmp5;
__cil_tmp4 = i + 1;
__cil_tmp5 = s * __cil_tmp4;
sum += __cil_tmp5;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (+ i 1)))
(assert(= __test__1 (* s __test__0)))
(assert(= __test__2( + sum __test__1 )))

variable:
s:int,sum:int,i:int,
track:
s:int,__test__2:int,sum:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,i:int,
count: 65save: 64
test

abundants_count = 0       ;
path:
int abundants_count;
abundants_count = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
abundants_count:int,
track:
abundants_count:int,__test__0:int,
count: 66save: 65
test

abundants = malloc ( abundants_count   *  sizeof   *  abundants       )         ;
path:
int abundants;
__asm__  ("booo_exp(test168.c:2)":);
abundants = malloc(0UL);
return;

constraint:
(declare-fun _output_  () Void )

variable:
abundants:int,
track:
__test__0:int,abundants:int,
count: 67save: 66
test

j = 0       ;
path:
int j;
j = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
j:int,
track:
__test__0:int,j:int,
count: 68save: 67
test

refname = "$1"  ;
path:
int refname;
refname = "$1";
return;

constraint:
(declare-fun _output_  () Void )
(assert (= (length __test__0) 2))
(assert (= (charOf __test__0 0) _dollar_ ))
(assert (= (charOf __test__0 1) _1_ ))

variable:
refname:int,
track:
__test__0:int,refname:int,
count: 69save: 68
test

expressed = calloc ( upper_limit       , sizeof   *  expressed       )         ;
path:
int expressed;
__asm__  ("booo_exp(test170.c:2)":);
expressed = calloc(0, 4UL);
return;

constraint:
(declare-fun _output_  () Void )

variable:
expressed:int,
track:
expressed:int,__test__0:int,
count: 70save: 69
test

k = n       ;
path:
int k;
int n;
k = n;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 n))

variable:
n:int,k:int,
track:
n:int,__test__0:int,k:int,
count: 71save: 70
test

sum *=  ( p   *  i    -  1      )  /  ( i   -1   )      ;
path:
int i;
int p;
int sum;
int __cil_tmp4;
int __cil_tmp5;
int __cil_tmp6;
int __cil_tmp7;
__cil_tmp4 = i - 1;
__cil_tmp5 = p * i;
__cil_tmp6 = __cil_tmp5 - 1;
__cil_tmp7 = __cil_tmp6 / __cil_tmp4;
sum *= __cil_tmp7;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (- i 1)))
(assert(= __test__1 (* p i)))
(assert(= __test__2 (- __test__1 1)))
(assert(= __test__3 (/ __test__2 __test__0)))
(assert(= __test__4( * sum __test__3 )))

variable:
p:int,sum:int,i:int,
track:
__cil_tmp7:int,__cil_tmp6:int,__test__4:int,__test__3:int,__test__2:int,p:int,sum:int,__test__0:int,__test__1:int,__cil_tmp5:int,__cil_tmp4:int,i:int,
count: 72save: 71
test

oldrev = "$2"  ;
path:
int oldrev;
oldrev = "$2";
return;

constraint:
(declare-fun _output_  () Void )
(assert (= (length __test__0) 2))
(assert (= (charOf __test__0 0) _dollar_ ))
(assert (= (charOf __test__0 1) _2_ ))

variable:
oldrev:int,
track:
__test__0:int,oldrev:int,
count: 73save: 72
test

imax = 0       ;
path:
int imax;
imax = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
imax:int,
track:
__test__0:int,imax:int,
count: 74save: 73
test

if ( len  >  maxlen     )     { maxlen = len        ;  imax = i        ;  }    
path:
int i;
int imax;
int len;
int maxlen;
len > maxlen;
maxlen = len;
imax = i;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( > len maxlen))
(assert(= __test__0 len))
(assert(= __test__1 i))

variable:
len:int,imax:int,maxlen:int,i:int,
track:
__test__0:int,__test__1:int,len:int,imax:int,maxlen:int,i:int,
path:
int i;
int imax;
int len;
int maxlen;
len <= maxlen;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( <= len maxlen))

variable:
len:int,imax:int,maxlen:int,i:int,
track:
len:int,imax:int,maxlen:int,i:int,
count: 75save: 74
count: 75save: 74
test

bmax = 0       ;
path:
int bmax;
bmax = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
bmax:int,
track:
bmax:int,__test__0:int,
count: 76save: 75
test

newrev = "$3"  ;
path:
int newrev;
newrev = "$3";
return;

constraint:
(declare-fun _output_  () Void )
(assert (= (length __test__0) 2))
(assert (= (charOf __test__0 0) _dollar_ ))
(assert (= (charOf __test__0 1) _3_ ))

variable:
newrev:int,
track:
__test__0:int,newrev:int,
count: 77save: 76
test

if ( n  <=  1     )     { return 0       ;  }    
path:
int n;
n > 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( > n 1))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
path:
int n;
n <= 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( <= n 1))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
count: 78save: 77
test

if ( n  ==  2     )     { return 1       ;  }    
path:
int n;
n == 2;
return (1);

constraint:
(declare-fun _output_  () Int )
(assert (= n 2))
(assert ( = _output_ 1))

variable:
n:int,
track:
n:int,
path:
int n;
n != 2;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= n 2)))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
count: 79save: 78
test

nums = malloc ( ( N   -1   )  *  ( N   -1   )  *  sizeof   *  nums       )         ;
path:
int nums;
__asm__  ("booo_exp(test198.c:2)":);
__asm__  ("booo_exp(test198.c:2)":);
nums = malloc(4UL);
return;

constraint:
(declare-fun _output_  () Void )

variable:
nums:int,
track:
nums:int,__test__0:int,
count: 80save: 79
count: 80save: 79
test

if ( i  ==  sum     )     { ttl +=  i        ;  }    
path:
int i;
int sum;
int ttl;
i != sum;
return;

constraint:
(declare-fun _output_  () Void )
(assert (not (= i sum)))

variable:
sum:int,ttl:int,i:int,
track:
sum:int,ttl:int,i:int,
path:
int i;
int sum;
int ttl;
i == sum;
ttl += i;
return;

constraint:
(declare-fun _output_  () Void )
(assert (= i sum))
(assert(= __test__0( + ttl i )))

variable:
sum:int,ttl:int,i:int,
track:
sum:int,__test__0:int,ttl:int,i:int,
count: 81save: 80
count: 81save: 80
test

ans_d = 1       ;
path:
int ans_d;
ans_d = 1;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 1))

variable:
ans_d:int,
track:
__test__0:int,ans_d:int,
count: 82save: 81
count: 82save: 81
test

a = b       ;
path:
int a;
int b;
a = b;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 b))

variable:
b:int,a:int,
track:
b:int,a:int,__test__0:int,
count: 83save: 82
test

b = r       ;
path:
int b;
int r;
b = r;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 r))

variable:
b:int,r:int,
track:
b:int,r:int,__test__0:int,
count: 84save: 83
test

return b      ;
path:
int b;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ b))

variable:
b:int,
track:
b:int,
count: 85save: 84
count: 85save: 84
count: 85save: 84
count: 85save: 84
count: 85save: 84
count: 85save: 84
test

sum = 0       ;
path:
int sum;
sum = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
sum:int,
track:
sum:int,__test__0:int,
count: 86save: 85
test

if ( i  ==  s     )     { sum +=  s        ;  }    
path:
int i;
int s;
int sum;
i == s;
sum += s;
return;

constraint:
(declare-fun _output_  () Void )
(assert (= i s))
(assert(= __test__0( + sum s )))

variable:
s:int,sum:int,i:int,
track:
s:int,sum:int,__test__0:int,i:int,
path:
int i;
int s;
int sum;
i != s;
return;

constraint:
(declare-fun _output_  () Void )
(assert (not (= i s)))

variable:
s:int,sum:int,i:int,
track:
s:int,sum:int,i:int,
count: 87save: 86
test

f *=  n   --     ;
path:
int f;
int n;
int tmp;
tmp = n;
n --;
f *= tmp;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 n))
(assert(= __test__1( * f __test__0 )))

variable:
f:int,n:int,
track:
f:int,n:int,tmp:int,__test__0:int,__test__1:int,
count: 88save: 87
test

return f      ;
path:
int f;
return (f);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ f))

variable:
f:int,
track:
f:int,
count: 89save: 88
test

count = 0       ;
path:
int count;
count = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
count:int,
track:
count:int,__test__0:int,
count: 90save: 89
count: 90save: 89
test

if ( n  <=  1     )     { return 0       ;  }    else if ( n  ==  2     )     { return 1       ;  }     
path:
int n;
n > 1;
n == 2;
return (1);

constraint:
(declare-fun _output_  () Int )
(assert ( > n 1))
(assert (= n 2))
(assert ( = _output_ 1))

variable:
n:int,
track:
n:int,
path:
int n;
n > 1;
n != 2;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( > n 1))
(assert (not (= n 2)))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
path:
int n;
n <= 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( <= n 1))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
count: 91save: 90
count: 91save: 90
count: 91save: 90
test

int  orig = n       ;
path:
int n;
int orig;
orig = n;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 n))

variable:
n:int,
track:
n:int,__test__0:int,orig:int,
count: 92save: 91
test

reversed = base   *  reversed    +  n   %  base        ;
path:
int base;
int n;
int reversed;
int __cil_tmp4;
int __cil_tmp5;
__cil_tmp4 = n % base;
__cil_tmp5 = base * reversed;
reversed = __cil_tmp5 + __cil_tmp4;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (% n base)))
(assert(= __test__1 (* base reversed)))
(assert(= __test__2 (+ __test__1 __test__0)))

variable:
n:int,base:int,reversed:int,
track:
__test__2:int,base:int,n:int,__test__0:int,__test__1:int,reversed:int,__cil_tmp5:int,__cil_tmp4:int,
count: 93save: 92
test

n /=  base       ;
path:
int base;
int n;
n /= base;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0( / n base )))

variable:
n:int,base:int,
track:
base:int,n:int,__test__0:int,
count: 94save: 93
count: 94save: 93
test

sum = 0       ;
path:
int sum;
sum = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
sum:int,
track:
sum:int,__test__0:int,
count: 95save: 94
test

k = i       ;
path:
int i;
int k;
k = i;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 i))

variable:
k:int,i:int,
track:
__test__0:int,k:int,i:int,
count: 96save: 95
test

d = log10 ( k       )         ;
path:
int d;
__asm__  ("booo_exp(test258.c:2)":);
d = log10(0);
return;

constraint:
(declare-fun _output_  () Void )

variable:
d:int,
track:
d:int,__test__0:int,
count: 97save: 96
test

d = pow ( 10       , d       )         ;
path:
int d;
d = pow(10, d);
return;

constraint:
(declare-fun _output_  () Void )

variable:
d:int,
track:
d:int,__test__0:int,
count: 98save: 97
count: 98save: 97
test

d /=  10       ;
path:
int d;
d /= 10;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0( / d 10 )))

variable:
d:int,
track:
d:int,__test__0:int,
count: 99save: 98
test

sum +=  i       ;
path:
int i;
int sum;
sum += i;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0( + sum i )))

variable:
sum:int,i:int,
track:
sum:int,__test__0:int,i:int,
count: 100save: 99
test

if ( n  <=  1     )     { return 0       ;  }    else if ( n  ==  2     )     { return 1       ;  }     
path:
int n;
n > 1;
n == 2;
return (1);

constraint:
(declare-fun _output_  () Int )
(assert ( > n 1))
(assert (= n 2))
(assert ( = _output_ 1))

variable:
n:int,
track:
n:int,
path:
int n;
n > 1;
n != 2;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( > n 1))
(assert (not (= n 2)))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
path:
int n;
n <= 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( <= n 1))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
count: 101save: 100
count: 101save: 100
count: 101save: 100
count: 101save: 100
java.lang.NullPointerException
count: 102save: 100
test

if ( l  !=  9     )     { return 0       ;  }    
path:
int l;
l != 9;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= l 9)))
(assert ( = _output_ 0))

variable:
l:int,
track:
l:int,
path:
int l;
l == 9;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= l 9))
(assert ( = _output_ 0))

variable:
l:int,
track:
l:int,
count: 103save: 101
test

zero = "0000000000000000000000000000000000000000"  ;
path:
int zero;
zero = "0000000000000000000000000000000000000000";
return;

constraint:
(declare-fun _output_  () Void )
(assert (= (length __test__0) 40))
(assert (= (charOf __test__0 0) _0_ ))
(assert (= (charOf __test__0 1) _0_ ))
(assert (= (charOf __test__0 2) _0_ ))
(assert (= (charOf __test__0 3) _0_ ))
(assert (= (charOf __test__0 4) _0_ ))
(assert (= (charOf __test__0 5) _0_ ))
(assert (= (charOf __test__0 6) _0_ ))
(assert (= (charOf __test__0 7) _0_ ))
(assert (= (charOf __test__0 8) _0_ ))
(assert (= (charOf __test__0 9) _0_ ))
(assert (= (charOf __test__0 10) _0_ ))
(assert (= (charOf __test__0 11) _0_ ))
(assert (= (charOf __test__0 12) _0_ ))
(assert (= (charOf __test__0 13) _0_ ))
(assert (= (charOf __test__0 14) _0_ ))
(assert (= (charOf __test__0 15) _0_ ))
(assert (= (charOf __test__0 16) _0_ ))
(assert (= (charOf __test__0 17) _0_ ))
(assert (= (charOf __test__0 18) _0_ ))
(assert (= (charOf __test__0 19) _0_ ))
(assert (= (charOf __test__0 20) _0_ ))
(assert (= (charOf __test__0 21) _0_ ))
(assert (= (charOf __test__0 22) _0_ ))
(assert (= (charOf __test__0 23) _0_ ))
(assert (= (charOf __test__0 24) _0_ ))
(assert (= (charOf __test__0 25) _0_ ))
(assert (= (charOf __test__0 26) _0_ ))
(assert (= (charOf __test__0 27) _0_ ))
(assert (= (charOf __test__0 28) _0_ ))
(assert (= (charOf __test__0 29) _0_ ))
(assert (= (charOf __test__0 30) _0_ ))
(assert (= (charOf __test__0 31) _0_ ))
(assert (= (charOf __test__0 32) _0_ ))
(assert (= (charOf __test__0 33) _0_ ))
(assert (= (charOf __test__0 34) _0_ ))
(assert (= (charOf __test__0 35) _0_ ))
(assert (= (charOf __test__0 36) _0_ ))
(assert (= (charOf __test__0 37) _0_ ))
(assert (= (charOf __test__0 38) _0_ ))
(assert (= (charOf __test__0 39) _0_ ))

variable:
zero:int,
track:
__test__0:int,zero:int,
count: 104save: 102
count: 104save: 102
test

maxp = 0       ;
path:
int maxp;
maxp = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
maxp:int,
track:
__test__0:int,maxp:int,
count: 105save: 103
test

if ( cnt  >  max     )     { max = cnt        ;  maxp = p        ;  }    
path:
int cnt;
int max;
int maxp;
int p;
cnt > max;
max = cnt;
maxp = p;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( > cnt max))
(assert(= __test__0 cnt))
(assert(= __test__1 p))

variable:
max:int,cnt:int,p:int,maxp:int,
track:
max:int,cnt:int,p:int,__test__0:int,__test__1:int,maxp:int,
path:
int cnt;
int max;
int maxp;
int p;
cnt <= max;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( <= cnt max))

variable:
max:int,cnt:int,p:int,maxp:int,
track:
max:int,cnt:int,p:int,maxp:int,
count: 106save: 104
test

if ( nth  ==  pow ( 10       , l       )       )     {  d [  l ++   ] = (   i / (   int )  pow ( 10       , digits    -  j   -1      )    ) % 10 ;  }    
path:
int nth;
int tmp;
__asm__  ("booo_exp(test290.c:2)":);
tmp = pow(10, 0);
nth != tmp;
return;

constraint:
(declare-fun _output_  () Void )
(assert (not (= nth __test__0)))

variable:
nth:int,
track:
tmp:int,nth:int,__test__0:int,
path:
int nth;
int tmp;
__asm__  ("booo_exp(test290.c:2)":);
tmp = pow(10, 0);
nth == tmp;
__asm__  ("booo_exp(test290.c:2)":);
return;

constraint:
(declare-fun _output_  () Void )
(assert (= nth __test__0))

variable:
nth:int,
track:
tmp:int,nth:int,__test__0:int,
count: 107save: 105
test

N = 9       ;
path:
int N;
N = 9;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 9))

variable:
N:int,
track:
__test__0:int,N:int,
count: 108save: 106
test

if ( n  ==  1     )     { return false       ;  }    
path:
int n;
n == 1;
__asm__  ("booo_exp(test296.c:2)":);
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (= n 1))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
path:
int n;
n != 1;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert (not (= n 1)))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
count: 109save: 107
java.lang.NullPointerException
count: 110save: 107
count: 110save: 107
count: 110save: 107
test

topic = "refs/heads/$2"  ;
path:
int topic;
topic = "refs/heads/$2";
return;

constraint:
(declare-fun _output_  () Void )
(assert (= (length __test__0) 13))
(assert (= (charOf __test__0 0) _r_ ))
(assert (= (charOf __test__0 1) _e_ ))
(assert (= (charOf __test__0 2) _f_ ))
(assert (= (charOf __test__0 3) _s_ ))
(assert (= (charOf __test__0 4) _fwdslash_ ))
(assert (= (charOf __test__0 5) _h_ ))
(assert (= (charOf __test__0 6) _e_ ))
(assert (= (charOf __test__0 7) _a_ ))
(assert (= (charOf __test__0 8) _d_ ))
(assert (= (charOf __test__0 9) _s_ ))
(assert (= (charOf __test__0 10) _fwdslash_ ))
(assert (= (charOf __test__0 11) _dollar_ ))
(assert (= (charOf __test__0 12) _2_ ))

variable:
topic:int,
track:
topic:int,__test__0:int,
count: 111save: 108
count: 111save: 108
test

return false      ;
path:
int false;
return (false);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ false))

variable:
false:int,
track:
false:int,
count: 112save: 109
test

return true      ;
path:
int true;
return (true);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ true))

variable:
true:int,
track:
true:int,
count: 113save: 110
test

fp = fopen ( "words.txt"  , "r"  )         ;
path:
int fp;
fp = fopen("words.txt", "r");
return;

constraint:
(declare-fun _output_  () Void )

variable:
fp:int,
track:
__test__0:int,fp:int,
count: 114save: 111
count: 114save: 111
test

sum = 0       ;
path:
int sum;
sum = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
sum:int,
track:
sum:int,__test__0:int,
count: 115save: 112
count: 115save: 112
test

cnt +=  is_triangle ( sum       )         ;
path:
int cnt;
int tmp;
__asm__  ("booo_exp(test308.c:2)":);
tmp = is_triangle(0);
cnt += tmp;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__1( + cnt __test__0 )))

variable:
cnt:int,
track:
cnt:int,tmp:int,__test__0:int,__test__1:int,
count: 116save: 113
count: 116save: 113
count: 116save: 113
count: 116save: 113
test

sum = 0       ;
path:
int sum;
sum = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
sum:int,
track:
sum:int,__test__0:int,
count: 117save: 114
count: 117save: 114
test

p = 1       ;
path:
int p;
p = 1;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 1))

variable:
p:int,
track:
p:int,__test__0:int,
count: 118save: 115
test

unsigned  min = UINT_MAX       ;
path:
int UINT_MAX;
unsigned int min;
min = UINT_MAX;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 UINT_MAX))

variable:
UINT_MAX:int,
track:
min:int,__test__0:int,UINT_MAX:int,
count: 119save: 116
count: 119save: 116
test

return n   *  ( 3   *  n   -1   )  /  2      ;
path:
int n;
int __cil_tmp2;
int __cil_tmp3;
int __cil_tmp4;
__cil_tmp2 = 3 * n;
__cil_tmp3 = __cil_tmp2 - 1;
__cil_tmp4 = n * __cil_tmp3;
return (__cil_tmp4 / 2);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* 3 n)))
(assert(= __test__1 (- __test__0 1)))
(assert(= __test__2 (* n __test__1)))
(assert ( = _output_ (/ __test__2 2)))

variable:
n:int,
track:
__test__2:int,n:int,__test__0:int,__test__1:int,__cil_tmp4:int,__cil_tmp3:int,__cil_tmp2:int,
count: 120save: 117
java.lang.NullPointerException
count: 121save: 117
test

sq = sqrt ( 1    +  8   *  n        )         ;
path:
int sq;
__asm__  ("booo_exp(test324.c:2)":);
sq = sqrt(1);
return;

constraint:
(declare-fun _output_  () Void )

variable:
sq:int,
track:
sq:int,__test__0:int,
count: 122save: 118
count: 122save: 118
test

sq = sqrt ( 1    +  24   *  n        )         ;
path:
int sq;
__asm__  ("booo_exp(test326.c:2)":);
sq = sqrt(1);
return;

constraint:
(declare-fun _output_  () Void )

variable:
sq:int,
track:
sq:int,__test__0:int,
count: 123save: 119
java.lang.NullPointerException
count: 124save: 119
test

return n   *  ( 2   *  n   -1   )     ;
path:
int n;
int __cil_tmp2;
int __cil_tmp3;
__cil_tmp2 = 2 * n;
__cil_tmp3 = __cil_tmp2 - 1;
return (n * __cil_tmp3);

constraint:
(declare-fun _output_  () Int )
(assert(= __test__0 (* 2 n)))
(assert(= __test__1 (- __test__0 1)))
(assert ( = _output_ (* n __test__1)))

variable:
n:int,
track:
n:int,__test__0:int,__test__1:int,__cil_tmp3:int,__cil_tmp2:int,
count: 125save: 120
test

sieve = prime_sieve ( N       )         ;
path:
int sieve;
__asm__  ("booo_exp(test329.c:2)":);
sieve = prime_sieve(0);
return;

constraint:
(declare-fun _output_  () Void )

variable:
sieve:int,
track:
sieve:int,__test__0:int,
count: 126save: 121
count: 126save: 121
test

primes = malloc ( sizeof ( unsigned )     *  N       )         ;
path:
int primes;
__asm__  ("booo_exp(test330.c:2)":);
primes = malloc(0UL);
return;

constraint:
(declare-fun _output_  () Void )

variable:
primes:int,
track:
__test__0:int,primes:int,
count: 127save: 122
test

j = 0       ;
path:
int j;
j = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
j:int,
track:
__test__0:int,j:int,
count: 128save: 123
count: 128save: 123
count: 128save: 123
test

sieve = calloc ( n       , sizeof   *  sieve       )         ;
path:
int sieve;
__asm__  ("booo_exp(test337.c:2)":);
sieve = calloc(0, 4UL);
return;

constraint:
(declare-fun _output_  () Void )

variable:
sieve:int,
track:
sieve:int,__test__0:int,
count: 129save: 124
test

return sieve      ;
path:
int sieve;
return (sieve);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ sieve))

variable:
sieve:int,
track:
sieve:int,
count: 130save: 125
count: 130save: 125
count: 130save: 125
test

j = 0       ;
path:
int j;
j = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
j:int,
track:
__test__0:int,j:int,
count: 131save: 126
test

return count      ;
path:
int count;
return (count);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ count))

variable:
count:int,
track:
count:int,
count: 132save: 127
test

rem = 0       ;
path:
int rem;
rem = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
rem:int,
track:
rem:int,__test__0:int,
count: 133save: 128
test

i = 6       ;
path:
int i;
i = 6;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 6))

variable:
i:int,
track:
__test__0:int,i:int,
count: 134save: 129
count: 134save: 129
count: 134save: 129
test

if ( n  <  2     )     { return false       ;  }    
path:
int n;
n >= 2;
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( >= n 2))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
path:
int n;
n < 2;
__asm__  ("booo_exp(test355.c:2)":);
return (0);

constraint:
(declare-fun _output_  () Int )
(assert ( < n 2))
(assert ( = _output_ 0))

variable:
n:int,
track:
n:int,
count: 135save: 130
java.lang.NullPointerException
count: 136save: 130
count: 136save: 130
count: 136save: 130
test

return false      ;
path:
int false;
return (false);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ false))

variable:
false:int,
track:
false:int,
count: 137save: 131
test

z = m       ;
path:
int m;
int z;
z = m;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 m))

variable:
m:int,z:int,
track:
__test__0:int,m:int,z:int,
count: 138save: 132
test

return true      ;
path:
int true;
return (true);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ true))

variable:
true:int,
track:
true:int,
count: 139save: 133
test

O7w = k       ;
path:
int O7w;
int k;
O7w = k;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 k))

variable:
O7w:int,k:int,
track:
O7w:int,__test__0:int,k:int,
count: 140save: 134
count: 140save: 134
test

K = H_   %  yU       ;
path:
int H_;
int K;
int yU;
K = H_ % yU;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (% H_ yU)))

variable:
H_:int,yU:int,K:int,
track:
H_:int,__test__0:int,yU:int,K:int,
count: 141save: 135
count: 141save: 135
test

q = r       ;
path:
int q;
int r;
q = r;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 r))

variable:
r:int,q:int,
track:
r:int,q:int,__test__0:int,
count: 142save: 136
count: 142save: 136
count: 142save: 136
test

C = Oy       ;
path:
int C;
int Oy;
C = Oy;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 Oy))

variable:
C:int,Oy:int,
track:
C:int,__test__0:int,Oy:int,
count: 143save: 137
count: 143save: 137
count: 143save: 137
count: 143save: 137
test

s15 = 0       ;
path:
int s15;
s15 = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
s15:int,
track:
__test__0:int,s15:int,
count: 144save: 138
count: 144save: 138
count: 144save: 138
count: 144save: 138
test

sum = 0       ;
path:
int sum;
sum = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
sum:int,
track:
sum:int,__test__0:int,
count: 145save: 139
test

a3 = a1    +  a2        ;
path:
int a1;
int a2;
int a3;
a3 = a1 + a2;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (+ a1 a2)))

variable:
a1:int,a2:int,a3:int,
track:
a1:int,a2:int,__test__0:int,a3:int,
count: 146save: 140
count: 146save: 140
test

a1 = a2       ;
path:
int a1;
int a2;
a1 = a2;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 a2))

variable:
a1:int,a2:int,
track:
a1:int,a2:int,__test__0:int,
count: 147save: 141
test

a2 = a3       ;
path:
int a2;
int a3;
a2 = a3;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 a3))

variable:
a2:int,a3:int,
track:
a2:int,__test__0:int,a3:int,
count: 148save: 142
test

pretty = oneline       ;
path:
int oneline;
int pretty;
pretty = oneline;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 oneline))

variable:
oneline:int,pretty:int,
track:
oneline:int,__test__0:int,pretty:int,
count: 149save: 143
count: 149save: 143
test

max = 0       ;
path:
int max;
max = 0;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 0))

variable:
max:int,
track:
max:int,__test__0:int,
count: 150save: 144
test

t = n       ;
path:
int n;
int t;
t = n;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 n))

variable:
t:int,n:int,
track:
t:int,n:int,__test__0:int,
count: 151save: 145
test

reversed = 10   *  reversed    +  ( t   %  10     )       ;
path:
int reversed;
__asm__  ("booo_exp(test66.c:2)":);
reversed = 10 * reversed;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 (* 10 reversed)))

variable:
reversed:int,
track:
__test__0:int,reversed:int,
count: 152save: 146
test

t /=  10       ;
path:
int t;
t /= 10;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0( / t 10 )))

variable:
t:int,
track:
t:int,__test__0:int,
count: 153save: 147
count: 153save: 147
test

ans = 1       ;
path:
int ans;
ans = 1;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 1))

variable:
ans:int,
track:
__test__0:int,ans:int,
count: 154save: 148
count: 154save: 148
test

if ( a  >  b     )     {  unsigned  long  t = a        ;  a = b        ;  b = t        ;  }    
path:
int a;
int b;
int t;
unsigned long t___0;
a > b;
t___0 = a;
a = b;
b = t___0;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( > a b))
(assert(= __test__0 a))
(assert(= __test__1 b))
(assert(= __test__2 null))

variable:
t:int,b:int,a:int,
track:
t:int,b:int,__test__2:int,a:int,__test__0:null,__test__1:int,
path:
int a;
int b;
int t;
unsigned long t___0;
a <= b;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( <= a b))

variable:
t:int,b:int,a:int,
track:
t:int,b:int,a:int,
count: 155save: 149
test

a = b       ;
path:
int a;
int b;
a = b;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 b))

variable:
b:int,a:int,
track:
b:int,a:int,__test__0:int,
count: 156save: 150
test

b = r       ;
path:
int b;
int r;
b = r;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 r))

variable:
b:int,r:int,
track:
b:int,r:int,__test__0:int,
count: 157save: 151
test

return b      ;
path:
int b;
return (b);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ b))

variable:
b:int,
track:
b:int,
count: 158save: 152
count: 158save: 152
test

return p   /  gcd ( a       , b       )        ;
path:
int p;
int tmp;
__asm__  ("booo_exp(test76.c:2)":);
__asm__  ("booo_exp(test76.c:2)":);
tmp = gcd(0, 0);
return (p / tmp);

constraint:
(declare-fun _output_  () Int )
(assert ( = _output_ (/ p __test__0)))

variable:
p:int,
track:
p:int,tmp:int,__test__0:int,
count: 159save: 153
count: 159save: 153
count: 159save: 153
test

n = 1000000       ;
path:
int n;
n = 1000000;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 1000000))

variable:
n:int,
track:
n:int,__test__0:int,
count: 160save: 154
test

sieve = calloc ( n       , sizeof   *  sieve       )         ;
path:
int sieve;
__asm__  ("booo_exp(test83.c:2)":);
sieve = calloc(0, 4UL);
return;

constraint:
(declare-fun _output_  () Void )

variable:
sieve:int,
track:
sieve:int,__test__0:int,
count: 161save: 155
count: 161save: 155
count: 161save: 155
test

n = 2000000       ;
path:
int n;
n = 2000000;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 2000000))

variable:
n:int,
track:
n:int,__test__0:int,
count: 162save: 156
count: 162save: 156
test

sieve = calloc ( n       , sizeof   *  sieve       )         ;
path:
int sieve;
__asm__  ("booo_exp(test92.c:2)":);
sieve = calloc(0, 4UL);
return;

constraint:
(declare-fun _output_  () Void )

variable:
sieve:int,
track:
sieve:int,__test__0:int,
count: 163save: 157
count: 163save: 157
count: 163save: 157
test

n = 1       ;
path:
int n;
n = 1;
return;

constraint:
(declare-fun _output_  () Void )
(assert(= __test__0 1))

variable:
n:int,
track:
n:int,__test__0:int,
count: 164save: 158
