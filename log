median

    if((x <= y && x >= z) || (x >= y && x <=z)) 
    	m = x;
    else if((y <= x && y >= z) || (y >= x && y <= z))
    	m = y;
    else
    	m = z;
    

constraint:
(declare-fun _output_  () Void )
(assert ( <= x y))
(assert ( < x z))
(assert ( < x y))
(assert ( > y x))
(assert ( >= y x))
(assert ( > y z))
(assert(= __test__0 z))

variable:
m:int,z:int,y:int,x:int,
track:
m:__test__0,z:z,y:y,x:x,
type:
__test__0:int,m:int,z:int,y:int,x:int,
path:

int m;
int x;
int y;
int z;
x <= y;
x < z;
x < y;
y > x;
y >= x;
y > z;
m = z;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( <= x y))
(assert ( < x z))
(assert ( < x y))
(assert ( > y x))
(assert ( >= y x))
(assert ( <= y z))
(assert(= __test__0 y))

variable:
m:int,z:int,y:int,x:int,
track:
m:__test__0,z:z,y:y,x:x,
type:
__test__0:int,m:int,z:int,y:int,x:int,
path:

int m;
int x;
int y;
int z;
x <= y;
x < z;
x < y;
y > x;
y >= x;
y <= z;
m = y;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( <= x y))
(assert ( < x z))
(assert ( >= x y))
(assert ( <= x z))
(assert(= __test__0 x))

variable:
m:int,z:int,y:int,x:int,
track:
m:__test__0,z:z,y:y,x:x,
type:
__test__0:int,m:int,z:int,y:int,x:int,
path:

int m;
int x;
int y;
int z;
x <= y;
x < z;
x >= y;
x <= z;
m = x;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( > x y))
(assert ( >= x y))
(assert ( <= x z))
(assert(= __test__0 x))

variable:
m:int,z:int,y:int,x:int,
track:
m:__test__0,z:z,y:y,x:x,
type:
__test__0:int,m:int,z:int,y:int,x:int,
path:

int m;
int x;
int y;
int z;
x > y;
x >= y;
x <= z;
m = x;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( > x y))
(assert ( >= x y))
(assert ( > x z))
(assert ( <= y x))
(assert ( < y z))
(assert ( < y x))
(assert(= __test__0 z))

variable:
m:int,z:int,y:int,x:int,
track:
m:__test__0,z:z,y:y,x:x,
type:
__test__0:int,m:int,z:int,y:int,x:int,
path:

int m;
int x;
int y;
int z;
x > y;
x >= y;
x > z;
y <= x;
y < z;
y < x;
m = z;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( <= x y))
(assert ( >= x z))
(assert(= __test__0 x))

variable:
m:int,z:int,y:int,x:int,
track:
m:__test__0,z:z,y:y,x:x,
type:
__test__0:int,m:int,z:int,y:int,x:int,
path:
int m;
int x;
int y;
int z;
x <= y;
x >= z;
m = x;
return;

constraint:
(declare-fun _output_  () Void )
(assert ( > x y))
(assert ( >= x y))
(assert ( > x z))
(assert ( <= y x))
(assert ( >= y z))
(assert(= __test__0 y))

variable:
m:int,z:int,y:int,x:int,
track:
m:__test__0,z:z,y:y,x:x,
type:
__test__0:int,m:int,z:int,y:int,x:int,
path:

int m;
int x;
int y;
int z;
x > y;
x >= y;
x > z;
y <= x;
y >= z;
m = y;
return;

count: 4save: 4
