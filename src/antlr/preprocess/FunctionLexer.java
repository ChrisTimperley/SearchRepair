// Generated from Function.g4 by ANTLR 4.4
package antlr.preprocess;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class FunctionLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__10=1, T__9=2, T__8=3, T__7=4, T__6=5, T__5=6, T__4=7, T__3=8, T__2=9, 
		T__1=10, T__0=11, ASSIGN=12, POINTER=13, ADDCTIVE=14, DEDUCTIVE=15, MULTIPLY=16, 
		DIVIDE=17, MOD=18, INCRE=19, DECRE=20, ADDSELF=21, DEDUCTSELF=22, MODSELF=23, 
		MULTISELF=24, DIVIDESELF=25, Int=26, Char=27, Float=28, String=29, Double=30, 
		ID=31, INT=32, FLOAT=33, OR=34, AND=35, LPAREN=36, RPAREN=37, LT=38, LE=39, 
		GT=40, GE=41, EQ=42, NEQ=43, WS=44, BlockComment=45, LineComment=46, CharacterLiteral=47, 
		StringLiteral=48, EscapeSequence=49;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'"
	};
	public static final String[] ruleNames = {
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "ASSIGN", "POINTER", "ADDCTIVE", "DEDUCTIVE", "MULTIPLY", 
		"DIVIDE", "MOD", "INCRE", "DECRE", "ADDSELF", "DEDUCTSELF", "MODSELF", 
		"MULTISELF", "DIVIDESELF", "Int", "Char", "Float", "String", "Double", 
		"ID", "INT", "FLOAT", "OR", "AND", "LPAREN", "RPAREN", "LT", "LE", "GT", 
		"GE", "EQ", "NEQ", "WS", "BlockComment", "LineComment", "CharacterLiteral", 
		"StringLiteral", "SCharSequence", "SChar", "EscapeSequence"
	};


	public FunctionLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Function.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\63\u0134\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13"+
		"\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22"+
		"\3\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\27\3\27"+
		"\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33"+
		"\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \7 \u00d0\n \f"+
		" \16 \u00d3\13 \3!\6!\u00d6\n!\r!\16!\u00d7\3\"\6\"\u00db\n\"\r\"\16\""+
		"\u00dc\3\"\3\"\6\"\u00e1\n\"\r\"\16\"\u00e2\3#\3#\3#\3$\3$\3$\3%\3%\3"+
		"&\3&\3\'\3\'\3(\3(\3(\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\6-\u0100\n-"+
		"\r-\16-\u0101\3-\3-\3.\3.\3.\3.\7.\u010a\n.\f.\16.\u010d\13.\3.\3.\3."+
		"\3.\3.\3/\3/\3/\3/\7/\u0118\n/\f/\16/\u011b\13/\3/\3/\3\60\3\60\3\60\3"+
		"\60\3\61\3\61\5\61\u0125\n\61\3\61\3\61\3\62\6\62\u012a\n\62\r\62\16\62"+
		"\u012b\3\63\3\63\5\63\u0130\n\63\3\64\3\64\3\64\3\u010b\2\65\3\3\5\4\7"+
		"\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22"+
		"#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C"+
		"#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\2e\2g\63\3\2\b\6\2C\\aac|~~\6"+
		"\2\62;C\\aac|\5\2\13\f\17\17\"\"\4\2\f\f\17\17\6\2\f\f\17\17$$^^\f\2$"+
		"$))AA^^cdhhppttvvxx\u013b\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2"+
		"\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2"+
		"\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3"+
		"\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2"+
		"\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67"+
		"\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2"+
		"\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2"+
		"\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]"+
		"\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5k\3\2\2\2\7m\3\2"+
		"\2\2\to\3\2\2\2\13q\3\2\2\2\rt\3\2\2\2\17{\3\2\2\2\21\u0083\3\2\2\2\23"+
		"\u0085\3\2\2\2\25\u0087\3\2\2\2\27\u008c\3\2\2\2\31\u008e\3\2\2\2\33\u0090"+
		"\3\2\2\2\35\u0092\3\2\2\2\37\u0094\3\2\2\2!\u0096\3\2\2\2#\u0098\3\2\2"+
		"\2%\u009a\3\2\2\2\'\u009c\3\2\2\2)\u009f\3\2\2\2+\u00a2\3\2\2\2-\u00a5"+
		"\3\2\2\2/\u00a8\3\2\2\2\61\u00ab\3\2\2\2\63\u00ae\3\2\2\2\65\u00b1\3\2"+
		"\2\2\67\u00b5\3\2\2\29\u00ba\3\2\2\2;\u00c0\3\2\2\2=\u00c6\3\2\2\2?\u00cd"+
		"\3\2\2\2A\u00d5\3\2\2\2C\u00da\3\2\2\2E\u00e4\3\2\2\2G\u00e7\3\2\2\2I"+
		"\u00ea\3\2\2\2K\u00ec\3\2\2\2M\u00ee\3\2\2\2O\u00f0\3\2\2\2Q\u00f3\3\2"+
		"\2\2S\u00f5\3\2\2\2U\u00f8\3\2\2\2W\u00fb\3\2\2\2Y\u00ff\3\2\2\2[\u0105"+
		"\3\2\2\2]\u0113\3\2\2\2_\u011e\3\2\2\2a\u0122\3\2\2\2c\u0129\3\2\2\2e"+
		"\u012f\3\2\2\2g\u0131\3\2\2\2ij\7_\2\2j\4\3\2\2\2kl\7(\2\2l\6\3\2\2\2"+
		"mn\7.\2\2n\b\3\2\2\2op\7]\2\2p\n\3\2\2\2qr\7k\2\2rs\7h\2\2s\f\3\2\2\2"+
		"tu\7t\2\2uv\7g\2\2vw\7v\2\2wx\7w\2\2xy\7t\2\2yz\7p\2\2z\16\3\2\2\2{|\7"+
		"g\2\2|}\7n\2\2}~\7u\2\2~\177\7g\2\2\177\u0080\7\"\2\2\u0080\u0081\7k\2"+
		"\2\u0081\u0082\7h\2\2\u0082\20\3\2\2\2\u0083\u0084\7=\2\2\u0084\22\3\2"+
		"\2\2\u0085\u0086\7}\2\2\u0086\24\3\2\2\2\u0087\u0088\7g\2\2\u0088\u0089"+
		"\7n\2\2\u0089\u008a\7u\2\2\u008a\u008b\7g\2\2\u008b\26\3\2\2\2\u008c\u008d"+
		"\7\177\2\2\u008d\30\3\2\2\2\u008e\u008f\7?\2\2\u008f\32\3\2\2\2\u0090"+
		"\u0091\7,\2\2\u0091\34\3\2\2\2\u0092\u0093\7-\2\2\u0093\36\3\2\2\2\u0094"+
		"\u0095\7/\2\2\u0095 \3\2\2\2\u0096\u0097\7,\2\2\u0097\"\3\2\2\2\u0098"+
		"\u0099\7\61\2\2\u0099$\3\2\2\2\u009a\u009b\7\'\2\2\u009b&\3\2\2\2\u009c"+
		"\u009d\7-\2\2\u009d\u009e\7-\2\2\u009e(\3\2\2\2\u009f\u00a0\7/\2\2\u00a0"+
		"\u00a1\7/\2\2\u00a1*\3\2\2\2\u00a2\u00a3\7-\2\2\u00a3\u00a4\7?\2\2\u00a4"+
		",\3\2\2\2\u00a5\u00a6\7/\2\2\u00a6\u00a7\7?\2\2\u00a7.\3\2\2\2\u00a8\u00a9"+
		"\7\'\2\2\u00a9\u00aa\7?\2\2\u00aa\60\3\2\2\2\u00ab\u00ac\7,\2\2\u00ac"+
		"\u00ad\7?\2\2\u00ad\62\3\2\2\2\u00ae\u00af\7\61\2\2\u00af\u00b0\7?\2\2"+
		"\u00b0\64\3\2\2\2\u00b1\u00b2\7k\2\2\u00b2\u00b3\7p\2\2\u00b3\u00b4\7"+
		"v\2\2\u00b4\66\3\2\2\2\u00b5\u00b6\7e\2\2\u00b6\u00b7\7j\2\2\u00b7\u00b8"+
		"\7c\2\2\u00b8\u00b9\7t\2\2\u00b98\3\2\2\2\u00ba\u00bb\7h\2\2\u00bb\u00bc"+
		"\7n\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be\7c\2\2\u00be\u00bf\7v\2\2\u00bf"+
		":\3\2\2\2\u00c0\u00c1\7e\2\2\u00c1\u00c2\7j\2\2\u00c2\u00c3\7c\2\2\u00c3"+
		"\u00c4\7t\2\2\u00c4\u00c5\7,\2\2\u00c5<\3\2\2\2\u00c6\u00c7\7f\2\2\u00c7"+
		"\u00c8\7q\2\2\u00c8\u00c9\7w\2\2\u00c9\u00ca\7d\2\2\u00ca\u00cb\7n\2\2"+
		"\u00cb\u00cc\7g\2\2\u00cc>\3\2\2\2\u00cd\u00d1\t\2\2\2\u00ce\u00d0\t\3"+
		"\2\2\u00cf\u00ce\3\2\2\2\u00d0\u00d3\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d1"+
		"\u00d2\3\2\2\2\u00d2@\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d4\u00d6\4\62;\2"+
		"\u00d5\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7\u00d8"+
		"\3\2\2\2\u00d8B\3\2\2\2\u00d9\u00db\4\62;\2\u00da\u00d9\3\2\2\2\u00db"+
		"\u00dc\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00de\3\2"+
		"\2\2\u00de\u00e0\7\60\2\2\u00df\u00e1\4\62;\2\u00e0\u00df\3\2\2\2\u00e1"+
		"\u00e2\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3D\3\2\2\2"+
		"\u00e4\u00e5\7~\2\2\u00e5\u00e6\7~\2\2\u00e6F\3\2\2\2\u00e7\u00e8\7(\2"+
		"\2\u00e8\u00e9\7(\2\2\u00e9H\3\2\2\2\u00ea\u00eb\7*\2\2\u00ebJ\3\2\2\2"+
		"\u00ec\u00ed\7+\2\2\u00edL\3\2\2\2\u00ee\u00ef\7>\2\2\u00efN\3\2\2\2\u00f0"+
		"\u00f1\7>\2\2\u00f1\u00f2\7?\2\2\u00f2P\3\2\2\2\u00f3\u00f4\7@\2\2\u00f4"+
		"R\3\2\2\2\u00f5\u00f6\7@\2\2\u00f6\u00f7\7?\2\2\u00f7T\3\2\2\2\u00f8\u00f9"+
		"\7?\2\2\u00f9\u00fa\7?\2\2\u00faV\3\2\2\2\u00fb\u00fc\7#\2\2\u00fc\u00fd"+
		"\7?\2\2\u00fdX\3\2\2\2\u00fe\u0100\t\4\2\2\u00ff\u00fe\3\2\2\2\u0100\u0101"+
		"\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0103\3\2\2\2\u0103"+
		"\u0104\b-\2\2\u0104Z\3\2\2\2\u0105\u0106\7\61\2\2\u0106\u0107\7,\2\2\u0107"+
		"\u010b\3\2\2\2\u0108\u010a\13\2\2\2\u0109\u0108\3\2\2\2\u010a\u010d\3"+
		"\2\2\2\u010b\u010c\3\2\2\2\u010b\u0109\3\2\2\2\u010c\u010e\3\2\2\2\u010d"+
		"\u010b\3\2\2\2\u010e\u010f\7,\2\2\u010f\u0110\7\61\2\2\u0110\u0111\3\2"+
		"\2\2\u0111\u0112\b.\2\2\u0112\\\3\2\2\2\u0113\u0114\7\61\2\2\u0114\u0115"+
		"\7\61\2\2\u0115\u0119\3\2\2\2\u0116\u0118\n\5\2\2\u0117\u0116\3\2\2\2"+
		"\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c"+
		"\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u011d\b/\2\2\u011d^\3\2\2\2\u011e\u011f"+
		"\7)\2\2\u011f\u0120\5e\63\2\u0120\u0121\7)\2\2\u0121`\3\2\2\2\u0122\u0124"+
		"\7$\2\2\u0123\u0125\5c\62\2\u0124\u0123\3\2\2\2\u0124\u0125\3\2\2\2\u0125"+
		"\u0126\3\2\2\2\u0126\u0127\7$\2\2\u0127b\3\2\2\2\u0128\u012a\5e\63\2\u0129"+
		"\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2"+
		"\2\2\u012cd\3\2\2\2\u012d\u0130\n\6\2\2\u012e\u0130\5g\64\2\u012f\u012d"+
		"\3\2\2\2\u012f\u012e\3\2\2\2\u0130f\3\2\2\2\u0131\u0132\7^\2\2\u0132\u0133"+
		"\t\7\2\2\u0133h\3\2\2\2\r\2\u00d1\u00d7\u00dc\u00e2\u0101\u010b\u0119"+
		"\u0124\u012b\u012f\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}