// Generated from IfBlockTest.g4 by ANTLR 4.2.2
package antlr.preprocess;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class IfBlockTestLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__3=1, T__2=2, T__1=3, T__0=4, LBR=5, RBR=6, IF=7, ELSE=8, RETURN=9, 
		BlockComment=10, LineComment=11, CharacterLiteral=12, StringLiteral=13, 
		Int=14, Char=15, Float=16, String=17, Double=18, INT=19, FLOAT=20, STRING=21, 
		ID=22, OR=23, AND=24, LPAREN=25, RPAREN=26, ADDCTIVE=27, DEDUCTIVE=28, 
		MULTIPLY=29, DIVIDE=30, MOD=31, ASSIGN=32, POINTER=33, INCRE=34, DECRE=35, 
		ADDSELF=36, DEDUCTSELF=37, MODSELF=38, MULTISELF=39, DIVIDESELF=40, LT=41, 
		LE=42, GT=43, GE=44, EQ=45, NEQ=46, WS=47;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'['", "';'", "','", "']'", "'{'", "'}'", "'if'", "'else'", "'return'", 
		"BlockComment", "LineComment", "CharacterLiteral", "StringLiteral", "'int'", 
		"'char'", "'float'", "'char*'", "'double'", "INT", "FLOAT", "STRING", 
		"ID", "'||'", "'&&'", "'('", "')'", "'+'", "'-'", "MULTIPLY", "'/'", "'%'", 
		"'='", "POINTER", "'++'", "'--'", "'+='", "'-='", "'%='", "'*='", "'/='", 
		"'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "WS"
	};
	public static final String[] ruleNames = {
		"T__3", "T__2", "T__1", "T__0", "LBR", "RBR", "IF", "ELSE", "RETURN", 
		"BlockComment", "LineComment", "CharacterLiteral", "StringLiteral", "Int", 
		"Char", "Float", "String", "Double", "INT", "FLOAT", "STRING", "ID", "OR", 
		"AND", "LPAREN", "RPAREN", "ADDCTIVE", "DEDUCTIVE", "MULTIPLY", "DIVIDE", 
		"MOD", "ASSIGN", "POINTER", "INCRE", "DECRE", "ADDSELF", "DEDUCTSELF", 
		"MODSELF", "MULTISELF", "DIVIDESELF", "LT", "LE", "GT", "GE", "EQ", "NEQ", 
		"WS", "SCharSequence", "SChar", "EscapeSequence"
	};


	public IfBlockTestLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "IfBlockTest.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\61\u0132\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2"+
		"\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3"+
		"\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\7\13\u0087\n\13"+
		"\f\13\16\13\u008a\13\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\7\f\u0095"+
		"\n\f\f\f\16\f\u0098\13\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\5\16\u00a2"+
		"\n\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21"+
		"\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\24\6\24\u00c3\n\24\r\24\16\24\u00c4\3\25\6\25\u00c8"+
		"\n\25\r\25\16\25\u00c9\3\25\3\25\7\25\u00ce\n\25\f\25\16\25\u00d1\13\25"+
		"\3\26\3\26\7\26\u00d5\n\26\f\26\16\26\u00d8\13\26\3\26\3\26\3\27\3\27"+
		"\7\27\u00de\n\27\f\27\16\27\u00e1\13\27\3\30\3\30\3\30\3\31\3\31\3\31"+
		"\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!"+
		"\3!\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3"+
		")\3)\3)\3*\3*\3+\3+\3+\3,\3,\3-\3-\3-\3.\3.\3.\3/\3/\3/\3\60\6\60\u0121"+
		"\n\60\r\60\16\60\u0122\3\60\3\60\3\61\6\61\u0128\n\61\r\61\16\61\u0129"+
		"\3\62\3\62\5\62\u012e\n\62\3\63\3\63\3\63\3\u0088\2\64\3\3\5\4\7\5\t\6"+
		"\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24"+
		"\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K"+
		"\'M(O)Q*S+U,W-Y.[/]\60_\61a\2c\2e\2\3\2\t\4\2\f\f\17\17\6\2\"\"C\\aac"+
		"|\5\2C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17\"\"\6\2\f\f\17\17$$^^\f\2$"+
		"$))AA^^cdhhppttvvxx\u0139\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2"+
		"\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2"+
		"\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3"+
		"\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2"+
		"\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67"+
		"\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2"+
		"\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2"+
		"\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]"+
		"\3\2\2\2\2_\3\2\2\2\3g\3\2\2\2\5i\3\2\2\2\7k\3\2\2\2\tm\3\2\2\2\13o\3"+
		"\2\2\2\rq\3\2\2\2\17s\3\2\2\2\21v\3\2\2\2\23{\3\2\2\2\25\u0082\3\2\2\2"+
		"\27\u0090\3\2\2\2\31\u009b\3\2\2\2\33\u009f\3\2\2\2\35\u00a5\3\2\2\2\37"+
		"\u00a9\3\2\2\2!\u00ae\3\2\2\2#\u00b4\3\2\2\2%\u00ba\3\2\2\2\'\u00c2\3"+
		"\2\2\2)\u00c7\3\2\2\2+\u00d2\3\2\2\2-\u00db\3\2\2\2/\u00e2\3\2\2\2\61"+
		"\u00e5\3\2\2\2\63\u00e8\3\2\2\2\65\u00ea\3\2\2\2\67\u00ec\3\2\2\29\u00ee"+
		"\3\2\2\2;\u00f0\3\2\2\2=\u00f2\3\2\2\2?\u00f4\3\2\2\2A\u00f6\3\2\2\2C"+
		"\u00f8\3\2\2\2E\u00fa\3\2\2\2G\u00fd\3\2\2\2I\u0100\3\2\2\2K\u0103\3\2"+
		"\2\2M\u0106\3\2\2\2O\u0109\3\2\2\2Q\u010c\3\2\2\2S\u010f\3\2\2\2U\u0111"+
		"\3\2\2\2W\u0114\3\2\2\2Y\u0116\3\2\2\2[\u0119\3\2\2\2]\u011c\3\2\2\2_"+
		"\u0120\3\2\2\2a\u0127\3\2\2\2c\u012d\3\2\2\2e\u012f\3\2\2\2gh\7]\2\2h"+
		"\4\3\2\2\2ij\7=\2\2j\6\3\2\2\2kl\7.\2\2l\b\3\2\2\2mn\7_\2\2n\n\3\2\2\2"+
		"op\7}\2\2p\f\3\2\2\2qr\7\177\2\2r\16\3\2\2\2st\7k\2\2tu\7h\2\2u\20\3\2"+
		"\2\2vw\7g\2\2wx\7n\2\2xy\7u\2\2yz\7g\2\2z\22\3\2\2\2{|\7t\2\2|}\7g\2\2"+
		"}~\7v\2\2~\177\7w\2\2\177\u0080\7t\2\2\u0080\u0081\7p\2\2\u0081\24\3\2"+
		"\2\2\u0082\u0083\7\61\2\2\u0083\u0084\7,\2\2\u0084\u0088\3\2\2\2\u0085"+
		"\u0087\13\2\2\2\u0086\u0085\3\2\2\2\u0087\u008a\3\2\2\2\u0088\u0089\3"+
		"\2\2\2\u0088\u0086\3\2\2\2\u0089\u008b\3\2\2\2\u008a\u0088\3\2\2\2\u008b"+
		"\u008c\7,\2\2\u008c\u008d\7\61\2\2\u008d\u008e\3\2\2\2\u008e\u008f\b\13"+
		"\2\2\u008f\26\3\2\2\2\u0090\u0091\7\61\2\2\u0091\u0092\7\61\2\2\u0092"+
		"\u0096\3\2\2\2\u0093\u0095\n\2\2\2\u0094\u0093\3\2\2\2\u0095\u0098\3\2"+
		"\2\2\u0096\u0094\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u0099\3\2\2\2\u0098"+
		"\u0096\3\2\2\2\u0099\u009a\b\f\2\2\u009a\30\3\2\2\2\u009b\u009c\7)\2\2"+
		"\u009c\u009d\5c\62\2\u009d\u009e\7)\2\2\u009e\32\3\2\2\2\u009f\u00a1\7"+
		"$\2\2\u00a0\u00a2\5a\61\2\u00a1\u00a0\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2"+
		"\u00a3\3\2\2\2\u00a3\u00a4\7$\2\2\u00a4\34\3\2\2\2\u00a5\u00a6\7k\2\2"+
		"\u00a6\u00a7\7p\2\2\u00a7\u00a8\7v\2\2\u00a8\36\3\2\2\2\u00a9\u00aa\7"+
		"e\2\2\u00aa\u00ab\7j\2\2\u00ab\u00ac\7c\2\2\u00ac\u00ad\7t\2\2\u00ad "+
		"\3\2\2\2\u00ae\u00af\7h\2\2\u00af\u00b0\7n\2\2\u00b0\u00b1\7q\2\2\u00b1"+
		"\u00b2\7c\2\2\u00b2\u00b3\7v\2\2\u00b3\"\3\2\2\2\u00b4\u00b5\7e\2\2\u00b5"+
		"\u00b6\7j\2\2\u00b6\u00b7\7c\2\2\u00b7\u00b8\7t\2\2\u00b8\u00b9\7,\2\2"+
		"\u00b9$\3\2\2\2\u00ba\u00bb\7f\2\2\u00bb\u00bc\7q\2\2\u00bc\u00bd\7w\2"+
		"\2\u00bd\u00be\7d\2\2\u00be\u00bf\7n\2\2\u00bf\u00c0\7g\2\2\u00c0&\3\2"+
		"\2\2\u00c1\u00c3\4\62;\2\u00c2\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4"+
		"\u00c2\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5(\3\2\2\2\u00c6\u00c8\4\62;\2"+
		"\u00c7\u00c6\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9\u00ca"+
		"\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cf\7\60\2\2\u00cc\u00ce\4\62;\2"+
		"\u00cd\u00cc\3\2\2\2\u00ce\u00d1\3\2\2\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0"+
		"\3\2\2\2\u00d0*\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2\u00d6\7$\2\2\u00d3\u00d5"+
		"\t\3\2\2\u00d4\u00d3\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6"+
		"\u00d7\3\2\2\2\u00d7\u00d9\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9\u00da\7$"+
		"\2\2\u00da,\3\2\2\2\u00db\u00df\t\4\2\2\u00dc\u00de\t\5\2\2\u00dd\u00dc"+
		"\3\2\2\2\u00de\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0"+
		".\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e3\7~\2\2\u00e3\u00e4\7~\2\2\u00e4"+
		"\60\3\2\2\2\u00e5\u00e6\7(\2\2\u00e6\u00e7\7(\2\2\u00e7\62\3\2\2\2\u00e8"+
		"\u00e9\7*\2\2\u00e9\64\3\2\2\2\u00ea\u00eb\7+\2\2\u00eb\66\3\2\2\2\u00ec"+
		"\u00ed\7-\2\2\u00ed8\3\2\2\2\u00ee\u00ef\7/\2\2\u00ef:\3\2\2\2\u00f0\u00f1"+
		"\7,\2\2\u00f1<\3\2\2\2\u00f2\u00f3\7\61\2\2\u00f3>\3\2\2\2\u00f4\u00f5"+
		"\7\'\2\2\u00f5@\3\2\2\2\u00f6\u00f7\7?\2\2\u00f7B\3\2\2\2\u00f8\u00f9"+
		"\7,\2\2\u00f9D\3\2\2\2\u00fa\u00fb\7-\2\2\u00fb\u00fc\7-\2\2\u00fcF\3"+
		"\2\2\2\u00fd\u00fe\7/\2\2\u00fe\u00ff\7/\2\2\u00ffH\3\2\2\2\u0100\u0101"+
		"\7-\2\2\u0101\u0102\7?\2\2\u0102J\3\2\2\2\u0103\u0104\7/\2\2\u0104\u0105"+
		"\7?\2\2\u0105L\3\2\2\2\u0106\u0107\7\'\2\2\u0107\u0108\7?\2\2\u0108N\3"+
		"\2\2\2\u0109\u010a\7,\2\2\u010a\u010b\7?\2\2\u010bP\3\2\2\2\u010c\u010d"+
		"\7\61\2\2\u010d\u010e\7?\2\2\u010eR\3\2\2\2\u010f\u0110\7>\2\2\u0110T"+
		"\3\2\2\2\u0111\u0112\7>\2\2\u0112\u0113\7?\2\2\u0113V\3\2\2\2\u0114\u0115"+
		"\7@\2\2\u0115X\3\2\2\2\u0116\u0117\7@\2\2\u0117\u0118\7?\2\2\u0118Z\3"+
		"\2\2\2\u0119\u011a\7?\2\2\u011a\u011b\7?\2\2\u011b\\\3\2\2\2\u011c\u011d"+
		"\7#\2\2\u011d\u011e\7?\2\2\u011e^\3\2\2\2\u011f\u0121\t\6\2\2\u0120\u011f"+
		"\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123"+
		"\u0124\3\2\2\2\u0124\u0125\b\60\2\2\u0125`\3\2\2\2\u0126\u0128\5c\62\2"+
		"\u0127\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a"+
		"\3\2\2\2\u012ab\3\2\2\2\u012b\u012e\n\7\2\2\u012c\u012e\5e\63\2\u012d"+
		"\u012b\3\2\2\2\u012d\u012c\3\2\2\2\u012ed\3\2\2\2\u012f\u0130\7^\2\2\u0130"+
		"\u0131\t\b\2\2\u0131f\3\2\2\2\16\2\u0088\u0096\u00a1\u00c4\u00c9\u00cf"+
		"\u00d6\u00df\u0122\u0129\u012d\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}